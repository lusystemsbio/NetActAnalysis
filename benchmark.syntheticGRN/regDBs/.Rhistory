#---------------------------------------------------
hist(as.numeric(target.sizes.regDB.10), xlim = XLIMIT, ylim = YLIMIT, main = toString(range.target.size.regDB.10), xlab = "")
abline(v=mean.target.size.regDB.10, col='red', lwd=2)
text(mean.target.size.regDB.10, y=y.abline.txt, mean.target.size.regDB.10, cex=cex.abline.text)
abline(v=target.size.nopert, col='red', lwd=2)
text(target.size.nopert, y=y.abline.txt, target.size.nopert, cex=cex.abline.text)
# Target sizes for regulon DB with 5 perturbations
#---------------------------------------------------
hist(as.numeric(target.sizes.regDB.15), xlim = XLIMIT, ylim = YLIMIT, main = toString(range.target.size.regDB.15), xlab = "")
abline(v=mean.target.size.regDB.15, col='red', lwd=2)
text(mean.target.size.regDB.15, y=y.abline.txt, mean.target.size.regDB.15, cex=cex.abline.text)
abline(v=target.size.nopert, col='red', lwd=2)
text(target.size.nopert, y=y.abline.txt, target.size.nopert, cex=cex.abline.text)
dev.off()
rm(list=ls())
datadir './/Users/a.katebi/research/netact/sim.nca/tfnetwork.random/net30tf/net30tf.1Kplsize/'
datadir <- './/Users/a.katebi/research/netact/sim.nca/tfnetwork.random/net30tf/net30tf.1Kplsize/'
load(file = paste(datadir, 'regdb.net30tf.perturbed.rda', sep = ''))
datadir <- '/Users/a.katebi/research/netact/sim.nca/tfnetwork.random/net30tf/net30tf.1Kplsize/'
load(file = paste(datadir, 'regdb.net30tf.perturbed.rda', sep = ''))
names(perturbed_reg_db)
length(names(perturbed_reg_db))
load(file = paste(datadir, 'regdb.net30tf.perturbed10.rda', sep = ''))
load(file = paste(datadir, 'regdb.net30tf.perturbed15.rda', sep = ''))
rm(perturbed_reg_db)
load(file = paste(datadir, 'regdb.net30tf.perturbed10.rda', sep = ''))
rm(perturbed_reg_db)
load(file = paste(datadir, 'regdb.net30tf.perturbed10.rda', sep = ''))
rm(perturbed_reg_db)
load(file = paste(datadir, 'regdb.net30tf.perturbed15.rda', sep = ''))
rm(perturbed_reg_db)
load(file = paste(datadir, 'regdb.net30tf.perturbed15.rda', sep = ''))
rm(perturbed_reg_db)
load(file = paste(datadir, 'regdb.net30tf.perturbed15.rda', sep = ''))
names(perturbed_reg_db)
perturbed_reg_db$tf6
length(names(perturbed_reg_db))
load(file = paste(datadir, 'regdb.net30tf.rda', sep = ''))
names(reg_db)
load(file = paste(datadir, 'regdb.net30tf.perturbed.rda', sep = ''))
names(perturbed_reg_db)
length(names(perturbed_reg_db))
load(file = paste(datadir, 'regdb.net30tf.perturbed10.rda', sep = ''))
names(perturbed_reg_db)
rm(list=ls())
setwd(getwd())
# Calculate target sizes for regDBs with NO perturbations
#-------------------------------------------------------
fname.regdb <- './regDB.nopert.rds'
regDB.nopert <- readRDS(file = fname.regdb)
target.size.nopert <- length(unique(unlist(regDB.nopert)))
print(target.size.nopert)
# Calculate target sizes for regDBs with 5 perturbations
#-------------------------------------------------------
fname.regdb <- './regDBs.5.rds'
regDBs <- readRDS(file = fname.regdb)
target.sizes.regDB.5 <- list()
for(regdb.id in names(regDBs)){
print(regdb.id)
regdb <- regDBs[[regdb.id]]
target.sizes.regDB.5[[regdb.id]] <- length(unique(unlist(regdb)))
#break()
}
hist(as.numeric(target.sizes.regDB.5))
# Calculate target sizes for regDBs with 10 perturbations
#-------------------------------------------------------
fname.regdb <- './regDBs.10.rds'
regDBs <- readRDS(file = fname.regdb)
target.sizes.regDB.10 <- list()
for(regdb.id in names(regDBs)){
print(regdb.id)
regdb <- regDBs[[regdb.id]]
target.sizes.regDB.10[[regdb.id]] <- length(unique(unlist(regdb)))
#break()
}
hist(as.numeric(target.sizes.regDB.10))
# Calculate target sizes for regDBs with 15 perturbations
#--------------------------------------------------------
fname.regdb <- './regDBs.15.rds'
regDBs <- readRDS(file = fname.regdb)
target.sizes.regDB.15 <- list()
for(regdb.id in names(regDBs)){
print(regdb.id)
regdb <- regDBs[[regdb.id]]
target.sizes.regDB.15[[regdb.id]] <- length(unique(unlist(regdb)))
#break()
}
hist(as.numeric(target.sizes.regDB.15))
# Means of target size distributions
#-----------------------------------------
mean.target.size.regDB.5 <- round(mean(as.numeric(target.sizes.regDB.5)))
mean.target.size.regDB.10 <- round(mean(as.numeric(target.sizes.regDB.10)))
mean.target.size.regDB.15 <- round(mean(as.numeric(target.sizes.regDB.15)))
# Ranges of target size distributions
#-----------------------------------------
range.target.size.regDB.5 <- c(min(as.numeric(target.sizes.regDB.5)), max(as.numeric(target.sizes.regDB.5)))
range.target.size.regDB.10 <- c(min(as.numeric(target.sizes.regDB.10)), max(as.numeric(target.sizes.regDB.10)))
range.target.size.regDB.15 <- c(min(as.numeric(target.sizes.regDB.15)), max(as.numeric(target.sizes.regDB.15)))
# Plot regulon DB target size distribution
#-----------------------------------------
target.size.min <- min(c(as.numeric(target.sizes.regDB.5), as.numeric(target.sizes.regDB.10), as.numeric(target.sizes.regDB.15)))
target.size.max <- max(c(as.numeric(target.sizes.regDB.5), as.numeric(target.sizes.regDB.10), as.numeric(target.sizes.regDB.15)))
XLIMIT <- c(target.size.min, target.size.nopert+14)
YLIMIT <- c(0, 45)
y.abline.txt <- 30
cex.abline.text  <- 1.2
hist(as.numeric(target.sizes.regDB.5), xlim = XLIMIT, ylim = YLIMIT, main = toString(range.target.size.regDB.5), xlab = "")
abline(v=mean.target.size.regDB.5, col='red', lwd=2)
text(mean.target.size.regDB.5, y=y.abline.txt, mean.target.size.regDB.5, cex=cex.abline.text)
abline(v=target.size.nopert, col='red', lwd=2)
text(target.size.nopert, y=y.abline.txt, target.size.nopert, cex=cex.abline.text)
par(mfrow=c(3,1))
hist(as.numeric(target.sizes.regDB.5), xlim = XLIMIT, ylim = YLIMIT, main = toString(range.target.size.regDB.5), xlab = "")
abline(v=mean.target.size.regDB.5, col='red', lwd=2)
text(mean.target.size.regDB.5, y=y.abline.txt, mean.target.size.regDB.5, cex=cex.abline.text)
abline(v=target.size.nopert, col='red', lwd=2)
text(target.size.nopert, y=y.abline.txt, target.size.nopert, cex=cex.abline.text)
# Target sizes for regulon DB with 5 perturbations
#---------------------------------------------------
hist(as.numeric(target.sizes.regDB.10), xlim = XLIMIT, ylim = YLIMIT, main = toString(range.target.size.regDB.10), xlab = "")
abline(v=mean.target.size.regDB.10, col='red', lwd=2)
text(mean.target.size.regDB.10, y=y.abline.txt, mean.target.size.regDB.10, cex=cex.abline.text)
abline(v=target.size.nopert, col='red', lwd=2)
text(target.size.nopert, y=y.abline.txt, target.size.nopert, cex=cex.abline.text)
# Target sizes for regulon DB with 5 perturbations
#---------------------------------------------------
hist(as.numeric(target.sizes.regDB.15), xlim = XLIMIT, ylim = YLIMIT, main = toString(range.target.size.regDB.15), xlab = "")
abline(v=mean.target.size.regDB.15, col='red', lwd=2)
text(mean.target.size.regDB.15, y=y.abline.txt, mean.target.size.regDB.15, cex=cex.abline.text)
abline(v=target.size.nopert, col='red', lwd=2)
text(target.size.nopert, y=y.abline.txt, target.size.nopert, cex=cex.abline.text)
# Create regdb with no perturbation for AUCell
# (1) do not include targets with inhibitory tf-target relation
# (2) include tf to its regulon
#--------------------------------------------------------------------------------------#
rm(list=ls())
#----------------------------------------------------------------------------------------#
#   Define input file names
#----------------------------------------------------------------------------------------#
fname_topology_csv <- paste0(datadir, 'net30tf.csv')
#
datadir <- '../sim.racipe/'
#----------------------------------------------------------------------------------------#
#   Define input file names
#----------------------------------------------------------------------------------------#
fname_topology_csv <- paste0(datadir, 'net30tf.csv')
#-----------------------------------------------------------------------------------------#
#    Load TF net
#-----------------------------------------------------------------------------------------#
tfnet_df <- read.csv(file=fname_topology_csv, header=TRUE)
#-----------------------------------------------------------------------------------------#
#                    LIBRARY
#-----------------------------------------------------------------------------------------#
source('./lib.tfnetwork.R')
#-----------------------------------------------------------------------------------------#
#                    LIBRARY
#-----------------------------------------------------------------------------------------#
source('./lib.tfnetwork.tmp.R')
#-----------------------------------------------------------------------------------------#
#                    LIBRARY
#-----------------------------------------------------------------------------------------#
source('lib.tfnetwork.tmp.R')
#-----------------------------------------------------------------------------------------#
#                    LIBRARY
#-----------------------------------------------------------------------------------------#
source('lib.tfnetwork.R')
#-----------------------------------------------------------------------------------------#
#                    LIBRARY
#-----------------------------------------------------------------------------------------#
source('.\lib.tfnetwork.R')
#-----------------------------------------------------------------------------------------#
#                    LIBRARY
#-----------------------------------------------------------------------------------------#
source('.\lib.tfnetwork.R')
#-----------------------------------------------------------------------------------------#
#                    LIBRARY
#-----------------------------------------------------------------------------------------#
source('./lib.tfnetwork.R')
getwd()
#-----------------------------------------------------------------------------------------#
#                    LIBRARY
#-----------------------------------------------------------------------------------------#
source('./lib.tfnetwork.R')
#-----------------------------------------------------------------------------------------#
#                    LIBRARY
#-----------------------------------------------------------------------------------------#
source('./lib.tfnetwork.R')
#-----------------------------------------------------------------------------------------#
#    Load TF net
#-----------------------------------------------------------------------------------------#
tfnet_df <- read.csv(file=fname_topology_csv, header=TRUE)
#-----------------------------------------------------------------------------------------#
#    Load TF net
#-----------------------------------------------------------------------------------------#
tfnet_df <- read.csv(file='../sim.racipe/net30tf.csv', header=TRUE)
regdb <- create_regdb(tfnet_df)
# save the regulon DB:
save(regdb, file = '.\regDB.nopert.aucell.rds')
# testing regDB:
tfs <- unique(names(regdb))
length(tfs)
# save the regulon DB:
saveRDS(regdb, file = '.\regDB.nopert.aucell.rds')
getwd()
saveRDS(regdb, file = '.\regDB.nopert.aucell.rds')
saveRDS(regdb, file = '.\regDB.nopert.aucell.rds')
?saveRDS
class(regdb)
regdb$tf6
saveRDS(regdb, file = 'regDB.nopert.aucell.rds')
saveRDS(regdb, file = 'regDB.nopert.aucell.rds')
# testing regDB:
tfs <- unique(names(regdb))
length(tfs)
targets <- unique(unlist(regdb))
length(targets)
# Create regdb with no perturbation for AUCell
# (1) do not include targets with inhibitory tf-target relation
# (2) include tf to its regulon
#--------------------------------------------------------------------------------------#
rm(list=ls())
tfnet_df <- read.csv(file='../sim.racipe/net30tf.csv', header=TRUE)
View(tfnet_df)
tfnet <- tfnet_df
reg_db <- list()
TYPE_ACT <- 1
TYPE_INH <- 2
TYPE_SIG <- 5
View(tfnet)
regdb <- create_regdb(tfnet_df)
source('./lib.tfnetwork.R')
regdb <- create_regdb(tfnet_df)
regdb$tf6
for(i in seq(1:dim(tfnet)[1])){
source <- as.character(tfnet[i,"SOURCE"])
target <- as.character(tfnet[i,"TARGET"])
type <- as.character(tfnet[i,"TYPE"])
if (type == TYPE_SIG) # dont include signaling interactions
next
if(!length(reg_db[[source]]))
reg_db[[source]] <- target
else
reg_db[[source]] <- c(reg_db[[source]], target)
break()
}
source
target
type
length(reg_db[[source]])
!length(reg_db[[source]])
reg_db[[source]]
source
reg_db <- list()
TYPE_ACT <- 1
TYPE_INH <- 2
TYPE_SIG <- 5
for(i in seq(1:dim(tfnet)[1])){
source <- as.character(tfnet[i,"SOURCE"])
target <- as.character(tfnet[i,"TARGET"])
type <- as.character(tfnet[i,"TYPE"])
# if (type == TYPE_SIG) # don't include signaling interactions
#    next
if (type == TYPE_SIG || TYPE_INH) # don't include signaling or inhibitory interactions
next
if(!length(reg_db[[source]])) { # first target found
#reg_db[[source]] <- target
reg_db[[source]] <- c(source, target)
}
else # second or subsequent target found
reg_db[[source]] <- c(reg_db[[source]], target)
#break()
}
return(reg_db)
create_regdb_for_AUCell <- function(tfnet){
#tfnet <- tfnet_df
reg_db <- list()
TYPE_ACT <- 1
TYPE_INH <- 2
TYPE_SIG <- 5
for(i in seq(1:dim(tfnet)[1])){
source <- as.character(tfnet[i,"SOURCE"])
target <- as.character(tfnet[i,"TARGET"])
type <- as.character(tfnet[i,"TYPE"])
# if (type == TYPE_SIG) # don't include signaling interactions
#    next
if (type == TYPE_SIG || TYPE_INH) # don't include signaling or inhibitory interactions
next
if(!length(reg_db[[source]])) { # first target found
#reg_db[[source]] <- target
reg_db[[source]] <- c(source, target)
}
else # second or subsequent target found
reg_db[[source]] <- c(reg_db[[source]], target)
#break()
}
return(reg_db)
}
regdb <- create_regdb_for_AUCell(tfnet_df)
saveRDS(regdb, file = 'regDB.nopert.aucell.rds')
targets <- unique(unlist(regdb))
length(targets)
regdb <- create_regdb_for_AUCell(tfnet_df)
targets <- unique(unlist(regdb))
length(targets)
class(regdb)
names(regdb)
create_regdb_for_AUCell <- function(tfnet){
#tfnet <- tfnet_df
reg_db <- list()
TYPE_ACT <- 1
TYPE_INH <- 2
TYPE_SIG <- 5
for(i in seq(1:dim(tfnet)[1])){
source <- as.character(tfnet[i,"SOURCE"])
target <- as.character(tfnet[i,"TARGET"])
type <- as.character(tfnet[i,"TYPE"])
# if (type == TYPE_SIG) # don't include signaling interactions
#    next
if (type == TYPE_SIG || TYPE_INH) # don't include signaling or inhibitory interactions
next
if(!length(reg_db[[source]])) { # first target found
#reg_db[[source]] <- target
reg_db[[source]] <- c(source, target)
}
else # second or subsequent target found
reg_db[[source]] <- c(reg_db[[source]], target)
#break()
}
return(reg_db)
}
regdb <- create_regdb_for_AUCell(tfnet_df)
targets <- unique(unlist(regdb))
length(targets)
#tfnet <- tfnet_df
reg_db <- list()
TYPE_ACT <- 1
TYPE_INH <- 2
TYPE_SIG <- 5
for(i in seq(1:dim(tfnet)[1])){
source <- as.character(tfnet[i,"SOURCE"])
target <- as.character(tfnet[i,"TARGET"])
type <- as.character(tfnet[i,"TYPE"])
# if (type == TYPE_SIG) # don't include signaling interactions
#    next
if (type == TYPE_SIG || TYPE_INH) # don't include signaling or inhibitory interactions
next
if(!length(reg_db[[source]])) { # first target found
#reg_db[[source]] <- target
reg_db[[source]] <- c(source, target)
}
else # second or subsequent target found
reg_db[[source]] <- c(reg_db[[source]], target)
#break()
}
class(reg_db)
#tfnet <- tfnet_df
reg_db <- list()
TYPE_ACT <- 1
TYPE_INH <- 2
TYPE_SIG <- 5
dim(tfnet)[1]
i
i=1
source <- as.character(tfnet[i,"SOURCE"])
target <- as.character(tfnet[i,"TARGET"])
type <- as.character(tfnet[i,"TYPE"])
# if (type == TYPE_SIG) # don't include signaling interactions
#    next
if (type == TYPE_SIG || TYPE_INH) # don't include signaling or inhibitory interactions
next
# if (type == TYPE_SIG) # don't include signaling interactions
#    next
if (type == TYPE_SIG || type == TYPE_INH) # don't include signaling or inhibitory interactions
next
if(!length(reg_db[[source]])) { # first target found
#reg_db[[source]] <- target
reg_db[[source]] <- c(source, target)
}
else # second or subsequent target found
reg_db[[source]] <- c(reg_db[[source]], target)
for(i in seq(1:dim(tfnet)[1])){
source <- as.character(tfnet[i,"SOURCE"])
target <- as.character(tfnet[i,"TARGET"])
type <- as.character(tfnet[i,"TYPE"])
# if (type == TYPE_SIG) # don't include signaling interactions
#    next
if (type == TYPE_SIG || type == TYPE_INH) # don't include signaling or inhibitory interactions
next
if(!length(reg_db[[source]])) { # first target found
#reg_db[[source]] <- target
reg_db[[source]] <- c(source, target)
} else # second or subsequent target found
reg_db[[source]] <- c(reg_db[[source]], target)
#break()
}
reg_db$tf1
reg_db$tf2
reg_db$tf1
#tfnet <- tfnet_df
reg_db <- list()
TYPE_ACT <- 1
TYPE_INH <- 2
TYPE_SIG <- 5
for(i in seq(1:dim(tfnet)[1])){
source <- as.character(tfnet[i,"SOURCE"])
target <- as.character(tfnet[i,"TARGET"])
type <- as.character(tfnet[i,"TYPE"])
# if (type == TYPE_SIG) # don't include signaling interactions
#    next
if (type == TYPE_SIG || type == TYPE_INH) # don't include signaling or inhibitory interactions
next
if(!length(reg_db[[source]])) { # first target found
#reg_db[[source]] <- target
reg_db[[source]] <- c(source, target)
} else # second or subsequent target found
reg_db[[source]] <- c(reg_db[[source]], target)
#break()
}
reg_db$tf1
reg_db$tf6
reg_db$tf1
create_regdb_for_AUCell <- function(tfnet){
#tfnet <- tfnet_df
reg_db <- list()
TYPE_ACT <- 1
TYPE_INH <- 2
TYPE_SIG <- 5
for(i in seq(1:dim(tfnet)[1])){
source <- as.character(tfnet[i,"SOURCE"])
target <- as.character(tfnet[i,"TARGET"])
type <- as.character(tfnet[i,"TYPE"])
# if (type == TYPE_SIG) # don't include signaling interactions
#    next
if (type == TYPE_SIG || type == TYPE_INH) # don't include signaling or inhibitory interactions
next
if(!length(reg_db[[source]])) { # first target found
#reg_db[[source]] <- target
reg_db[[source]] <- c(source, target)
} else # second or subsequent target found
reg_db[[source]] <- c(reg_db[[source]], target)
#break()
}
return(reg_db)
}
reg_db$tf6
reg_db$tf1
regdb <- create_regdb_for_AUCell(tfnet_df)
saveRDS(regdb, file = 'regDB.nopert.aucell.rds')
targets <- unique(unlist(regdb))
length(targets)
class(tfnet)
nrow(tfnet)
create_regdb_for_AUCell <- function(tfnet){
#tfnet <- tfnet_df
reg_db <- list()
TYPE_ACT <- 1
TYPE_INH <- 2
TYPE_SIG <- 5
for(i in seq(1:dim(tfnet)[1])){
source <- as.character(tfnet[i,"SOURCE"])
target <- as.character(tfnet[i,"TARGET"])
type <- as.character(tfnet[i,"TYPE"])
# if (type == TYPE_SIG) # don't include signaling interactions
#    next
if (type == TYPE_SIG || type == TYPE_INH) # don't include signaling or inhibitory interactions
next
if(!length(reg_db[[source]])) { # first target found
#reg_db[[source]] <- target
reg_db[[source]] <- c(source, target)
} else # second or subsequent target found
reg_db[[source]] <- c(reg_db[[source]], target)
#break()
}
return(reg_db)
}
regdb <- create_regdb_for_AUCell(tfnet_df)
saveRDS(regdb, file = 'regDB.nopert.aucell.rds')
targets <- unique(unlist(regdb))
length(targets)
rm(list=ls())
regdb.5.list <- readRDS(file = './regDBs.5.rds')
regdb.10.list <- readRDS(file = './regDBs.10.rds')
regdb.15.list <- readRDS(file = './regDBs.15.rds')
regdb.all.pert <- list()
regdb.5.list
class(regdb.5.list)
regdb.all.pert[["regdb.5"]] <- readRDS(file = './regDBs.5.rds')
regdb.all.pert <- list()
regdb.all.pert[["regdb.5"]] <- readRDS(file = './regDBs.5.rds')
regdb.all.pert[["regdb.10"]] <- readRDS(file = './regDBs.10.rds')
regdb.all.pert[["regdb.15"]] <- readRDS(file = './regDBs.15.rds')
rm(list=ls())
regdb.all.pert <- list()
regdb.all.pert[["regdb.5"]] <- readRDS(file = './regDBs.5.rds')
regdb.all.pert[["regdb.10"]] <- readRDS(file = './regDBs.10.rds')
regdb.all.pert[["regdb.15"]] <- readRDS(file = './regDBs.15.rds')
saveRDS(regdb.all.pert, file = './regdb.all.pert.rds')
rm(list=ls())
setwd(getwd())
getRegSizes <- function(regdb){
#regSizes <- sapply(names(regdb), function(tf) length(regdb[[tf]]))
return(sapply(names(regdb), function(tf) length(regdb[[tf]])) )
}
# Calculate target sizes for regDBs with NO perturbations
#-------------------------------------------------------
fname.regdb <- './regDB.nopert.rds'
regDB.nopert <- readRDS(file = fname.regdb)
target.size.nopert <- length(unique(unlist(regDB.nopert)))
print(target.size.nopert)
regSizes.nopert <- getRegSizes(regdb = regDB.nopert)
hist(regSizes.nopert)
getwd()
