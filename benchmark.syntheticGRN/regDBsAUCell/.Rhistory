names(regdb.new) <- names(regdb)
return(regdb.new)
}
create_perturbed_regdb_for_AUCell <- function(regdb, regdb.pos, regdb.neg) {
regdb.new <- lapply(names(regdb), function(tf) {
# other targets: went into the perturbed regulon because of the perturbation effect
targetsOth <- setdiff(regdb[[tf]], union(regdb.pos[[tf]], regdb.neg[[tf]]))
union(intersect(regdb[[tf]], regdb.pos[[tf]]), # positive targets
sample(targetsOth, ceiling(length(targetsOth)/2))) # random half of other targets
}
)
names(regdb.new) <- names(regdb)
return(regdb.new)
}
names(regdb.5)
regdb.5.new <- lapply(names(regdb.5), function(regdb.id)
create_perturbed_regdb_for_AUCell(regdb.5[[regdb.id]], regdb.pos, regdb.neg)
)
length(regdb.5.new)
names(regdb.5.new)
names(regdb.5.new) <- names(regdb.5)
names(regdb.5.new)
regDB <- regdb.5
regDB <- regdb.5
regDB <- regdb.5
regDB.new <- lapply(names(regDB), function(regdb.id)
create_perturbed_regdb_for_AUCell(regDB[[regdb.id]], regdb.pos, regdb.neg)
)
names(regDB.new) <- names(regDB)
length(regDB)
names(regDB)
create_perturbed_regDBset <- function(regDB, regdb.pos, regdb.neg){
create_perturbed_regdb_for_AUCell <- function(regdb, regdb.pos, regdb.neg) {
regdb.new <- lapply(names(regdb), function(tf) {
# other targets: went into the perturbed regulon because of the perturbation effect
targetsOth <- setdiff(regdb[[tf]], union(regdb.pos[[tf]], regdb.neg[[tf]]))
union(intersect(regdb[[tf]], regdb.pos[[tf]]), # positive targets
sample(targetsOth, ceiling(length(targetsOth)/2))) # random half of the other targets
}
)
names(regdb.new) <- names(regdb)
return(regdb.new)
}
regDB.new <- lapply(names(regDB), function(regdb.id)
create_perturbed_regdb_for_AUCell(regDB[[regdb.id]], regdb.pos, regdb.neg)
)
return(regDB.new)
}
regDB.new <- create_perturbed_regDBset(regDB=regdb.5, regdb.pos, regdb.neg)
names(regDB.new)
regDB.5 <- readRDS(file = '../regDBs.5.rds')
regDB.10 <- readRDS(file = '../regDBs.10.rds')
regDB.15 <- readRDS(file = '../regDBs.15.rds')
regdb.pos <- readRDS(file = './regdb.pos.rds')
regdb.neg <- readRDS(file = './regdb.neg.rds')
regdb <- regDB.5$regdb.1
set.seed(100)
create_perturbed_regdb_for_AUCell <- function(regdb, regdb.pos, regdb.neg) {
regdb.new <- lapply(names(regdb), function(tf) {
# other targets: went into the perturbed regulon because of the perturbation effect
targetsOth <- setdiff(regdb[[tf]], union(regdb.pos[[tf]], regdb.neg[[tf]]))
union(intersect(regdb[[tf]], regdb.pos[[tf]]), # positive targets
sample(targetsOth, ceiling(length(targetsOth)/2))) # random half of the other targets
}
)
names(regdb.new) <- names(regdb)
return(regdb.new)
}
create_perturbed_regDBset <- function(regDB, regdb.pos, regdb.neg){
create_perturbed_regdb_for_AUCell <- function(regdb, regdb.pos, regdb.neg) {
regdb.new <- lapply(names(regdb), function(tf) {
# other targets: went into the perturbed regulon because of the perturbation effect
targetsOth <- setdiff(regdb[[tf]], union(regdb.pos[[tf]], regdb.neg[[tf]]))
union(intersect(regdb[[tf]], regdb.pos[[tf]]), # positive targets
sample(targetsOth, ceiling(length(targetsOth)/2))) # random half of the other targets
}
)
names(regdb.new) <- names(regdb)
return(regdb.new)
}
regDB.new <- lapply(names(regDB), function(regdb.id)
create_perturbed_regdb_for_AUCell(regDB[[regdb.id]], regdb.pos, regdb.neg)
)
return(regDB.new)
}
regDB.new <- create_perturbed_regDBset(regDB=regDB.5, regdb.pos, regdb.neg)
names(regDB.new) <- regDB.5
regDB.new <- create_perturbed_regDBset(regDB=regDB.5, regdb.pos, regdb.neg)
names(regDB.new) <- names(regDB.5)
regdb.t <- regDB.new$regdb.1
names(regdb.t)
saveRDS(regDB.new, file = './regDB.5-AUCell.rds')
regDB.new <- create_perturbed_regDBset(regDB=regDB.10, regdb.pos, regdb.neg)
names(regDB.new) <- names(regDB.10)
saveRDS(regDB.new, file = './regDB.10-AUCell.rds')
regDB.new <- create_perturbed_regDBset(regDB=regDB.15, regdb.pos, regdb.neg)
names(regDB.new) <- names(regDB.15)
saveRDS(regDB.new, file = './regDB.15-AUCell.rds')
regDB.new <- create_perturbed_regDBset(regDB=regDB.5, regdb.pos, regdb.neg)
names(regDB.new) <- names(regDB.5)
regDB.new <- create_perturbed_regDBset(regDB=regDB.5, regdb.pos, regdb.neg)
names(regDB.new) <- names(regDB.5)
saveRDS(regDB.new, file = './regDB.5-AUCell.rds')
regDB.new <- create_perturbed_regDBset(regDB=regDB.10, regdb.pos, regdb.neg)
names(regDB.new) <- names(regDB.10)
saveRDS(regDB.new, file = './regDB.10-AUCell.rds')
regDB.new <- create_perturbed_regDBset(regDB=regDB.15, regdb.pos, regdb.neg)
names(regDB.new) <- names(regDB.15)
saveRDS(regDB.new, file = './regDB.15-AUCell.rds')
create_perturbed_regDBset <- function(regDB, regdb.pos, regdb.neg){
create_perturbed_regdb_for_AUCell <- function(regdb, regdb.pos, regdb.neg) {
regdb.new <- lapply(names(regdb), function(tf) {
# other targets: went into the perturbed regulon because of the perturbation effect
targetsOth <- setdiff(regdb[[tf]], union(regdb.pos[[tf]], regdb.neg[[tf]]))
union(intersect(regdb[[tf]], regdb.pos[[tf]]), # positive targets
sample(targetsOth, ceiling(length(targetsOth)/2))) # random half of the other targets
}
)
names(regdb.new) <- names(regdb)
return(regdb.new)
}
regDB.new <- lapply(names(regDB), function(regdb.id)
create_perturbed_regdb_for_AUCell(regDB[[regdb.id]], regdb.pos, regdb.neg)
)
names(regDB.new) <- names(regDB)
return(regDB.new)
}
regDB.5 <- readRDS(file = '../regDBs.5.rds')
regDB.10 <- readRDS(file = '../regDBs.10.rds')
regDB.15 <- readRDS(file = '../regDBs.15.rds')
regdb.pos <- readRDS(file = './regdb.pos.rds')
regdb.neg <- readRDS(file = './regdb.neg.rds')
regDB.new <- create_perturbed_regDBset(regDB=regDB.5, regdb.pos, regdb.neg)
saveRDS(regDB.new, file = './regDB.5-AUCell.rds')
regDB.new <- create_perturbed_regDBset(regDB=regDB.10, regdb.pos, regdb.neg)
saveRDS(regDB.new, file = './regDB.10-AUCell.rds')
regDB.new <- create_perturbed_regDBset(regDB=regDB.15, regdb.pos, regdb.neg)
saveRDS(regDB.new, file = './regDB.15-AUCell.rds')
regDB.new <- create_perturbed_regDBset(regDB=regDB.5, regdb.pos, regdb.neg)
saveRDS(regDB.new, file = './regDB.5-AUCell.rds')
regDB.new <- create_perturbed_regDBset(regDB=regDB.10, regdb.pos, regdb.neg)
saveRDS(regDB.new, file = './regDB.10-AUCell.rds')
regDB.new <- create_perturbed_regDBset(regDB=regDB.15, regdb.pos, regdb.neg)
saveRDS(regDB.new, file = './regDB.15-AUCell.rds')
set.seed(100)
regDB.new <- create_perturbed_regDBset(regDB=regDB.5, regdb.pos, regdb.neg)
saveRDS(regDB.new, file = './regDB.5-AUCell.rds')
regDB.new <- create_perturbed_regDBset(regDB=regDB.10, regdb.pos, regdb.neg)
saveRDS(regDB.new, file = './regDB.10-AUCell.rds')
regDB.new <- create_perturbed_regDBset(regDB=regDB.15, regdb.pos, regdb.neg)
saveRDS(regDB.new, file = './regDB.15-AUCell.rds')
regDB.5 <- readRDS(file = '../regDBs.5.rds')
regDB.10 <- readRDS(file = '../regDBs.10.rds')
regDB.15 <- readRDS(file = '../regDBs.15.rds')
regdb.pos <- readRDS(file = './regdb.pos.rds')
regdb.neg <- readRDS(file = './regdb.neg.rds')
set.seed(100)
regDB.new <- create_perturbed_regDBset(regDB=regDB.5, regdb.pos, regdb.neg)
saveRDS(regDB.new, file = './regDB.5-AUCell.rds')
regDB.new <- create_perturbed_regDBset(regDB=regDB.10, regdb.pos, regdb.neg)
saveRDS(regDB.new, file = './regDB.10-AUCell.rds')
regDB.new <- create_perturbed_regDBset(regDB=regDB.15, regdb.pos, regdb.neg)
saveRDS(regDB.new, file = './regDB.15-AUCell.rds')
create_perturbed_regDBset <- function(regDB, regdb.pos, regdb.neg){
create_perturbed_regdb_for_AUCell <- function(regdb, regdb.pos, regdb.neg) {
regdb.new <- lapply(names(regdb), function(tf) {
# other targets: went into the perturbed regulon because of the perturbation effect
targetsOth <- setdiff(regdb[[tf]], union(regdb.pos[[tf]], regdb.neg[[tf]]))
union(intersect(regdb[[tf]], regdb.pos[[tf]]), # positive targets
sample(targetsOth, ceiling(length(targetsOth)/2))) # random half of the other targets
}
)
names(regdb.new) <- names(regdb)
return(regdb.new)
}
regDB.new <- lapply(names(regDB), function(regdb.id)
create_perturbed_regdb_for_AUCell(regDB[[regdb.id]], regdb.pos, regdb.neg)
)
names(regDB.new) <- names(regDB)
return(regDB.new)
}
regDB.5 <- readRDS(file = '../regDBs.5.rds')
regDB.10 <- readRDS(file = '../regDBs.10.rds')
regDB.15 <- readRDS(file = '../regDBs.15.rds')
regdb.pos <- readRDS(file = './regdb.pos.rds')
regdb.neg <- readRDS(file = './regdb.neg.rds')
set.seed(100)
regDB.new <- create_perturbed_regDBset(regDB=regDB.5, regdb.pos, regdb.neg)
set.seed(100)
regDB.new <- create_perturbed_regDBset(regDB=regDB.5, regdb.pos, regdb.neg)
saveRDS(regDB.new, file = './regDBs.5-AUCell.rds')
regDB.new <- create_perturbed_regDBset(regDB=regDB.10, regdb.pos, regdb.neg)
saveRDS(regDB.new, file = './regDBs.10-AUCell.rds')
regDB.new <- create_perturbed_regDBset(regDB=regDB.15, regdb.pos, regdb.neg)
saveRDS(regDB.new, file = './regDBs.15-AUCell.rds')
rm(list=ls())
create_perturbed_regDBset <- function(regDB, regdb.pos, regdb.neg){
create_perturbed_regdb_for_AUCell <- function(regdb, regdb.pos, regdb.neg) {
regdb.new <- lapply(names(regdb), function(tf) {
# other targets: went into the perturbed regulon because of the perturbation effect
targetsOth <- setdiff(regdb[[tf]], union(regdb.pos[[tf]], regdb.neg[[tf]]))
union(intersect(regdb[[tf]], regdb.pos[[tf]]), # positive targets
sample(targetsOth, ceiling(length(targetsOth)/2))) # random half of the other targets
}
)
names(regdb.new) <- names(regdb)
return(regdb.new)
}
regDB.new <- lapply(names(regDB), function(regdb.id)
create_perturbed_regdb_for_AUCell(regDB[[regdb.id]], regdb.pos, regdb.neg)
)
names(regDB.new) <- names(regDB)
return(regDB.new)
}
regDB.5 <- readRDS(file = '../regDBs.5.rds')
regDB.10 <- readRDS(file = '../regDBs.10.rds')
regDB.15 <- readRDS(file = '../regDBs.15.rds')
regdb.pos <- readRDS(file = './regdb.pos.rds')
regdb.neg <- readRDS(file = './regdb.neg.rds')
set.seed(100)
regDB.new <- create_perturbed_regDBset(regDB=regDB.5, regdb.pos, regdb.neg)
saveRDS(regDB.new, file = './regDBs.5-AUCell.rds')
regDB.new <- create_perturbed_regDBset(regDB=regDB.10, regdb.pos, regdb.neg)
saveRDS(regDB.new, file = './regDBs.10-AUCell.rds')
regDB.new <- create_perturbed_regDBset(regDB=regDB.15, regdb.pos, regdb.neg)
saveRDS(regDB.new, file = './regDBs.15-AUCell.rds')
rm(list=ls())
setwd(getwd())
# Calculate target sizes for regDBs with NO perturbations
#-------------------------------------------------------
fname.regdb <- './regDB.nopert.rds'
regDB.nopert <- readRDS(file = fname.regdb)
target.size.nopert <- length(unique(unlist(regDB.nopert)))
print(target.size.nopert)
regSize.nopert <- sapply(names(regDB.nopert), function(tf){
length(regDB.nopert[[tf]])
}
)
hist(regSize.nopert)
getRegSizes <- function(regdb){
#regSizes <- sapply(names(regdb), function(tf) length(regdb[[tf]]))
return(sapply(names(regdb), function(tf) length(regdb[[tf]])) )
}
getRegSizes <- function(regdb){
#regSizes <- sapply(names(regdb), function(tf) length(regdb[[tf]]))
return(sapply(names(regdb), function(tf) length(regdb[[tf]])) )
}
regSize.nopert2 <- getRegSizes(regdb = regDB.nopert)
hist(regSize.nopert2 )
regSize.nopert <- getRegSizes(regdb = regDB.nopert)
hist(regSize.nopert)
regSizes.nopert <- getRegSizes(regdb = regDB.nopert)
hist(regSizes.nopert)
names(regDBs)
# Calculate target sizes for regDBs with 5 perturbations
#-------------------------------------------------------
fname.regdb <- './regDBs.5.rds'
regDBs <- readRDS(file = fname.regdb)
target.sizes.regDB.5 <- list()
for(regdb.id in names(regDBs)){
print(regdb.id)
regdb <- regDBs[[regdb.id]]
target.sizes.regDB.5[[regdb.id]] <- length(unique(unlist(regdb)))
#break()
}
hist(as.numeric(target.sizes.regDB.5))
names(regDBs)
regSizes.regDB5 <- lapply(names(regDBs), function(regdb.id) getRegSizes(regdb = regDBs[[regdb.id]]) )
length(regSizes.regDB5)
class(regSizes.regDB5)
t <- unlist(regSizes.regDB5)
length(t)
hist(t)
hist(regSizes.regDB5)
regSizes.regDB5 <- lapply(names(regDBs), function(regdb.id) getRegSizes(regdb = regDBs[[regdb.id]]) )
regSizes.regDB5 <- unlist(regSizes.regDB5)
hist(regSizes.regDB5)
regSizes.regDB <- lapply(names(regDBs), function(regdb.id) getRegSizes(regdb = regDBs[[regdb.id]]) )
regSizes.regDB5 <- unlist(regSizes.regDB)
hist(regSizes.regDB5)
# regDBs with 10 perturbations
#-----------------------------
regDBs <- readRDS(file =  './regDBs.10.rds' )
regSizes.regDB <- lapply(names(regDBs), function(regdb.id) getRegSizes(regdb = regDBs[[regdb.id]]) )
regSizes.regDB10 <- unlist(regSizes.regDB)
hist(regSizes.regDB10)
# regDBs with 15 perturbations
#-----------------------------
regDBs <- readRDS(file =  './regDBs.15.rds' )
regSizes.regDB <- lapply(names(regDBs), function(regdb.id) getRegSizes(regdb = regDBs[[regdb.id]]) )
regSizes.regDB15 <- unlist(regSizes.regDB)
hist(regSizes.regDB15)
length(regSizes.regDB15)
# Plot regulon DB target size distribution
#-----------------------------------------
target.size.min <- min(c(as.numeric(regSizes.regDB5), as.numeric(regSizes.regDB10), as.numeric(regSizes.regDB15)))
target.size.max <- max(c(as.numeric(regSizes.regDB5), as.numeric(regSizes.regDB10), as.numeric(regSizes.regDB15)))
XLIMIT <- c(target.size.min, target.size.nopert+14)
YLIMIT <- c(0, 45)
y.abline.txt <- 30
cex.abline.text  <- 1.2
# Plot target size distribution for regulon DB with 5 perturbations
#---------------------------------------------------
figdir <- './figs/'
dir.create(figdir)
figname <- paste(figdir, 'distr.regulon.sizes.pdf', sep='')
par(mfrow=c(3,1))
hist(as.numeric(regSizes.regDB5), xlim = XLIMIT, ylim = YLIMIT, main = toString(range.target.size.regDB.5), xlab = "")
par(mfrow=c(3,1))
hist(as.numeric(regSizes.regDB5), xlim = XLIMIT, ylim = YLIMIT, main = toString(range.target.size.regDB.5), xlab = "")
hist(as.numeric(regSizes.regDB5), xlim = XLIMIT, ylim = YLIMIT, main = toString(regSizes.regDB15), xlab = "")
par(mfrow=c(3,1))
hist(as.numeric(regSizes.regDB5), xlim = XLIMIT, ylim = YLIMIT, main = toString(regSizes.regDB15), xlab = "")
target.size.nopert
target.size.min
XLIMIT <- c(target.size.min, 30)
YLIMIT <- c(0, 45)
y.abline.txt <- 30
cex.abline.text  <- 1.2
par(mfrow=c(3,1))
hist(as.numeric(regSizes.regDB5), xlim = XLIMIT, ylim = YLIMIT, main = toString(regSizes.regDB15), xlab = "")
YLIMIT <- c(0, 200)
hist(as.numeric(regSizes.regDB5), xlim = XLIMIT, ylim = YLIMIT, main = toString(regSizes.regDB15), xlab = "")
YLIMIT <- c(0, 500)
hist(as.numeric(regSizes.regDB5), xlim = XLIMIT, ylim = YLIMIT, main = toString(regSizes.regDB15), xlab = "")
par(mfrow=c(3,1))
hist(as.numeric(regSizes.regDB5), xlim = XLIMIT, ylim = YLIMIT, main = toString(regSizes.regDB15), xlab = "")
XLIMIT <- c(target.size.min, 22)
YLIMIT <- c(0, 500)
par(mfrow=c(3,1))
hist(as.numeric(regSizes.regDB5), xlim = XLIMIT, ylim = YLIMIT, main = toString(regSizes.regDB15), xlab = "")
YLIMIT <- c(0, 600)
par(mfrow=c(3,1))
hist(as.numeric(regSizes.regDB5), xlim = XLIMIT, ylim = YLIMIT, main = toString(regSizes.regDB15), xlab = "")
abline(v=mean.target.size.regDB.5, col='red', lwd=2)
abline(v=mean(regSizes.regDB5), col='red', lwd=2)
text(mean(regSizes.regDB5), y=y.abline.txt, mean(regSizes.regDB5), cex=cex.abline.text)
par(mfrow=c(3,1))
hist(as.numeric(regSizes.regDB5), xlim = XLIMIT, ylim = YLIMIT, main = toString(regSizes.regDB15), xlab = "")
abline(v=mean(regSizes.regDB5), col='red', lwd=2)
hist(as.numeric(regSizes.regDB5), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB15', xlab = "")
abline(v=mean(regSizes.regDB5), col='red', lwd=2)
par(mfrow=c(3,1))
hist(as.numeric(regSizes.regDB5), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB15', xlab = "")
abline(v=mean(regSizes.regDB5), col='red', lwd=2)
par(mfrow=c(3,1))
hist(as.numeric(regSizes.regDB5), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB5', xlab = "")
abline(v=mean(regSizes.regDB5), col='red', lwd=2)
hist(as.numeric(regSizes.regDB10), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB10', xlab = "")
abline(v=mean(regSizes.regDB10), col='red', lwd=2)
hist(as.numeric(regSizes.regDB15), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB15', xlab = "")
abline(v=mean(regSizes.regDB15), col='red', lwd=2)
YLIMIT <- c(0, 800)
par(mfrow=c(3,1))
hist(as.numeric(regSizes.regDB5), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB5', xlab = "")
abline(v=mean(regSizes.regDB5), col='red', lwd=2)
hist(as.numeric(regSizes.regDB10), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB10', xlab = "")
abline(v=mean(regSizes.regDB10), col='red', lwd=2)
hist(as.numeric(regSizes.regDB15), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB15', xlab = "")
abline(v=mean(regSizes.regDB15), col='red', lwd=2)
YLIMIT <- c(0, 1200)
par(mfrow=c(3,1))
hist(as.numeric(regSizes.regDB5), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB5', xlab = "")
abline(v=mean(regSizes.regDB5), col='red', lwd=2)
hist(as.numeric(regSizes.regDB10), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB10', xlab = "")
abline(v=mean(regSizes.regDB10), col='red', lwd=2)
hist(as.numeric(regSizes.regDB15), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB15', xlab = "")
abline(v=mean(regSizes.regDB15), col='red', lwd=2)
YLIMIT <- c(0, 1000)
pdf(file = figname, width=6, height=6, paper='special', onefile = TRUE)
par(mfrow=c(3,1))
hist(as.numeric(regSizes.regDB5), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB5', xlab = "")
abline(v=mean(regSizes.regDB5), col='red', lwd=2)
hist(as.numeric(regSizes.regDB10), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB10', xlab = "")
abline(v=mean(regSizes.regDB10), col='red', lwd=2)
hist(as.numeric(regSizes.regDB15), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB15', xlab = "")
abline(v=mean(regSizes.regDB15), col='red', lwd=2)
YLIMIT <- c(0, 900)
par(mfrow=c(3,1))
hist(as.numeric(regSizes.regDB5), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB5', xlab = "")
abline(v=mean(regSizes.regDB5), col='red', lwd=2)
hist(as.numeric(regSizes.regDB10), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB10', xlab = "")
abline(v=mean(regSizes.regDB10), col='red', lwd=2)
hist(as.numeric(regSizes.regDB15), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB15', xlab = "")
abline(v=mean(regSizes.regDB15), col='red', lwd=2)
YLIMIT <- c(0, 850)
par(mfrow=c(3,1))
hist(as.numeric(regSizes.regDB5), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB5', xlab = "")
abline(v=mean(regSizes.regDB5), col='red', lwd=2)
hist(as.numeric(regSizes.regDB10), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB10', xlab = "")
abline(v=mean(regSizes.regDB10), col='red', lwd=2)
hist(as.numeric(regSizes.regDB15), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB15', xlab = "")
abline(v=mean(regSizes.regDB15), col='red', lwd=2)
par(mfrow=c(3,1))
hist(as.numeric(regSizes.regDB5), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB5', xlab = "")
abline(v=mean(regSizes.regDB5), col='red', lwd=2)
hist(as.numeric(regSizes.regDB10), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB10', xlab = "")
abline(v=mean(regSizes.regDB10), col='red', lwd=2)
hist(as.numeric(regSizes.regDB15), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB15', xlab = "")
abline(v=mean(regSizes.regDB15), col='red', lwd=2)
YLIMIT <- c(0, 830)
hist(as.numeric(regSizes.regDB5), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB5', xlab = "")
abline(v=mean(regSizes.regDB5), col='red', lwd=2)
par(mfrow=c(3,1))
hist(as.numeric(regSizes.regDB5), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB5', xlab = "")
abline(v=mean(regSizes.regDB5), col='red', lwd=2)
hist(as.numeric(regSizes.regDB10), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB10', xlab = "")
abline(v=mean(regSizes.regDB10), col='red', lwd=2)
hist(as.numeric(regSizes.regDB15), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB15', xlab = "")
abline(v=mean(regSizes.regDB15), col='red', lwd=2)
hist(as.numeric(regSizes.regDB15), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB15', xlab = "")
dev.off
dev.off()
dev.off()
par(mfrow=c(3,1))
hist(as.numeric(regSizes.regDB5), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB5', xlab = "")
abline(v=mean(regSizes.regDB5), col='red', lwd=2)
hist(as.numeric(regSizes.regDB10), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB10', xlab = "")
abline(v=mean(regSizes.regDB10), col='red', lwd=2)
hist(as.numeric(regSizes.regDB15), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB15', xlab = "")
YLIMIT <- c(0, 850)
par(mfrow=c(3,1))
hist(as.numeric(regSizes.regDB15), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB15', xlab = "")
abline(v=mean(regSizes.regDB15), col='red', lwd=2)
par(mfrow=c(3,1))
hist(as.numeric(regSizes.regDB5), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB5', xlab = "")
abline(v=mean(regSizes.regDB5), col='red', lwd=2)
hist(as.numeric(regSizes.regDB10), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB10', xlab = "")
abline(v=mean(regSizes.regDB10), col='red', lwd=2)
hist(as.numeric(regSizes.regDB15), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB15', xlab = "")
abline(v=mean(regSizes.regDB15), col='red', lwd=2)
figname <- paste(figdir, 'distr.regulon.sizes.pdf', sep='')
pdf(file = figname, width=6, height=6, paper='special', onefile = TRUE)
par(mfrow=c(3,1))
hist(as.numeric(regSizes.regDB5), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB5', xlab = "")
abline(v=mean(regSizes.regDB5), col='red', lwd=2)
hist(as.numeric(regSizes.regDB10), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB10', xlab = "")
abline(v=mean(regSizes.regDB10), col='red', lwd=2)
hist(as.numeric(regSizes.regDB15), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB15', xlab = "")
abline(v=mean(regSizes.regDB15), col='red', lwd=2)
dev.off()
# Plot regulon DB target size distribution
#-----------------------------------------
XLIMIT <- c(0, 20)
YLIMIT <- c(0, 850)
par(mfrow=c(3,1))
hist(as.numeric(regSizes.regDB5), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB5', xlab = "")
abline(v=mean(regSizes.regDB5), col='red', lwd=2)
hist(as.numeric(regSizes.regDB10), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB10', xlab = "")
abline(v=mean(regSizes.regDB10), col='red', lwd=2)
hist(as.numeric(regSizes.regDB15), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB15', xlab = "")
abline(v=mean(regSizes.regDB15), col='red', lwd=2)
# Plot regulon DB target size distribution
#-----------------------------------------
XLIMIT <- c(5, 20)
YLIMIT <- c(0, 850)
par(mfrow=c(3,1))
hist(as.numeric(regSizes.regDB5), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB5', xlab = "")
abline(v=mean(regSizes.regDB5), col='red', lwd=2)
hist(as.numeric(regSizes.regDB10), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB10', xlab = "")
abline(v=mean(regSizes.regDB10), col='red', lwd=2)
hist(as.numeric(regSizes.regDB15), xlim = XLIMIT, ylim = YLIMIT, main = 'regDB15', xlab = "")
abline(v=mean(regSizes.regDB15), col='red', lwd=2)
regdb.nopert.prev <- readRDS(file = '../regDBs/regDB.nopert.rds')
regdb.neg <- readRDS(file = '../regDB.neg.rds')
regdb.neg <- readRDS(file = './regDB.neg.rds')
regdb.pos <- readRDS(file = './regDB.pos.rds')
regdb.nopert.new <- vector(mode = 'list', length = length(regdb.nopert.prev))
class(regdb.nopert.new)
names(regdb.nopert.new) <- names(regdb.nopert.prev)
names(regdb.nopert.prev )
t <- lapply(names(regdb.nopert.prev), function(tf) {
union(tf, setdiff(regdb.nopert.prev[[tf]], regdb.neg[[tf]]))
}
)
t
regdb.nopert.new <- lapply(names(regdb.nopert.prev), function(tf)  union(tf, setdiff(regdb.nopert.prev[[tf]], regdb.neg[[tf]]))
)
names(regdb.nopert.new) <- names(regdb.nopert.prev)
regdb.nopert.new$tf6
regdb.nopert.prev$tf6
saveRDS(regdb.nopert.new, file = 'regDB.nopert.rds')
rm(list=ls())
create_perturbed_regDBset <- function(regDB, regdb.pos, regdb.neg){
create_perturbed_regdb_for_AUCell <- function(regdb, regdb.pos, regdb.neg) {
regdb.new <- lapply(names(regdb), function(tf) {
# other targets: went into the perturbed regulon because of the perturbation effect
targetsOth <- setdiff(regdb[[tf]], union(regdb.pos[[tf]], regdb.neg[[tf]]))
union(intersect(regdb[[tf]], regdb.pos[[tf]]), # positive targets
sample(targetsOth, ceiling(length(targetsOth)/2))) # random half of the other targets
}
)
names(regdb.new) <- names(regdb)
return(regdb.new)
}
regDB.new <- lapply(names(regDB), function(regdb.id)
create_perturbed_regdb_for_AUCell(regDB[[regdb.id]], regdb.pos, regdb.neg)
)
names(regDB.new) <- names(regDB)
return(regDB.new)
}
regDB.5 <- readRDS(file = '../regDBs/regDBs.5.rds')
regDB.10 <- readRDS(file = '../regDBs/regDBs.10.rds')
regDB.15 <- readRDS(file = '../regDBs/regDBs.15.rds')
regdb.pos <- readRDS(file = './regdb.pos.rds')
regdb.neg <- readRDS(file = './regdb.neg.rds')
set.seed(100)
regDB.new <- create_perturbed_regDBset(regDB=regDB.5, regdb.pos, regdb.neg)
saveRDS(regDB.new, file = './regDBs.5.rds')
regdb.all.pert <- list()
saveRDS(regdb.all.pert, file = './regdb.all.pert.rds')
class(regDB.new)
