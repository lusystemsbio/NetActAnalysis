rm(list=ls())
save_dir <- './net30tf/'
dir.create(save_dir)
libdir <- './'
#--------------------------------------------------------------------------------------------------------#
#   Define filenames
#--------------------------------------------------------------------------------------------------------#
fname_network_csv <- paste0(save_dir, 'net30tf.csv')
fname_network_csv <- paste0(save_dir, 'net30tf.csv')
fname_network_tpo <- paste0(save_dir, 'net30tf.tpo')
fname_regulon <- paste0(save_dir, 'regdb.net30tf.rda')
fname_lib <- paste0(libdir,'lib.tfnetwork.R')
# complement network:
fname_network_comp_csv <- paste0(save_dir, 'net30tf.comp.csv')
source(fname_lib)
# CONSTANTS
NO_TFS <- 30
NO_LINKS_PER_TF <- 2
TFSET <- sprintf("tf%d", 1:NO_TFS)
TARGET_POOLSIZE <- 500
NO_TARGETS_PER_TF <- 20
TARGETSET <- sprintf("tg%d", 1:TARGET_POOLSIZE)
# INITIALIZATION
#regulon DB:
reg_db <- list()
# INITIALIZATION
#regulon DB:
reg_db <- list()
# BUILD NETWORK
# create TF net among TF set:
ret_list <- create_tfnet(TFSET, NO_LINKS_PER_TF, reg_db)
tfnet <- ret_list[[1]]
# INITIALIZATION
#regulon DB:
reg_db <- list()
# BUILD NETWORK
# create TF net among TF set:
ret_list <- create_tfnet(TFSET, NO_LINKS_PER_TF, reg_db)
source(fname_lib)
# BUILD NETWORK
# create TF net among TF set:
#ret_list <- create_tfnet(TFSET, NO_LINKS_PER_TF, reg_db)
ret_list <- create_tfnet(TFSET, NO_LINKS_PER_TF)
names(ret_list)
ret_list
class(ret_list)
rm(ret_list)
reg_db <- create_regdb (tfnet)
tfnet <- create_tfnet(TFSET, NO_LINKS_PER_TF)
reg_db <- create_regdb (tfnet)
# create TF net from TF set to TARGET set:
ret_list <- create_tf2target_net(TARGETSET, NO_TARGETS_PER_TF, reg_db)
tfnet <- create_tfnet(TFSET, NO_LINKS_PER_TF)
View(tfnet)
# create TF net from TF set to TARGET set:
ret_list <- create_tf2target_net(TARGETSET, NO_TARGETS_PER_TF, reg_db)
tf2target_net <- create_tf2target_net(TARGETSET, NO_TARGETS_PER_TF, reg_db)
tf2target_net <- create_tf2target_net(TARGETSET, NO_TARGETS_PER_TF)
tf2target_net <- create_tf2target_net(TFSET, TARGETSET, NO_TARGETS_PER_TF)
reg_db <- create_regdb (tfnet)
#--------------------------------------------------------------------------------------------------------#
#                   COMBINE TF NETWORK AND TF TO TARGET NETWORK
#--------------------------------------------------------------------------------------------------------#
# combine the interactions within TF set with those between TF set and TARGET set:
tfnet = rbind(tfnet, tf2target_net)
reg_db <- create_regdb (tfnet)
#--------------------------------------------------------------------------------------------------------#
#                   SAVE TO FILES
#--------------------------------------------------------------------------------------------------------#
# save as csv file:
write.csv(tfnet, file=fname_network_csv, quote = FALSE,
row.names = FALSE)
# save as tpo file:
write.table(tfnet, file=fname_network_tpo, quote = FALSE,
row.names = FALSE, sep='\t')
# save the regulon DB:
save(reg_db, file = fname_regulon)
#                   SAVE TO FILES
#-----------------------------------------------#
# save as csv file:
write.csv(tfnet, file=fname_network_csv, quote = FALSE,
row.names = FALSE)
# save as tpo file:
write.table(tfnet, file=fname_network_tpo, quote = FALSE,
row.names = FALSE, sep='\t')
# save the regulon DB:
save(reg_db, file = fname_regulon)
#                   COMPLEMENTARY NETWORK
#           consisting of non-interacting pairs
#-------------------------------------------------#
tfnet_comp <- data.frame('SOURCE' = character(),
'TARGET' = character())
length(TFSET)
TARGETSET_USED <- unique(tf2target_net$TARGET)
length(TARGETSET_USED)
cat("\nNUM of TFS:")
cat(length(TFSET))
cat("\nTARGET POOLSIZE:")
cat(TARGET_POOLSIZE)
TARGETSET_USED <- unique(tf2target_net$TARGET)
cat("\nNUM of TARGETS USED:")
cat(length(TARGETSET_USED))
for (g in TFSET){
# TF subset not used for LINKS among TFSET
target_set1 <- setdiff(TFSET, reg_db[[g]])
# target subset not used for LINKS from TFSET to TARGETSET:
target_set2 <- setdiff(TARGETSET_USED, reg_db[[g]])
# merge the two subsets:
targets <- union(target_set1, target_set2)
tfsubnet <- data.frame('SOURCE' = rep(g, each=length(targets)),
'TARGET' = targets)
tfnet_comp <- rbind(tfnet_comp, tfsubnet)
#break
}
tfnet_comp$TYPE <- 0
# save as csv file:
write.csv(tfnet_comp, file=fname_network_comp_csv, quote = FALSE,
row.names = FALSE)
reg_db
length(reg_db)
names(reg_db)
#  Create COMPLEMENTARY NETWORK (consisting of non-interacting pairs)
tfnet_comp <- data.frame('SOURCE' = character(), 'TARGET' = character())
length(TFSET)
TARGETSET_USED <- unique(tf2target_net$TARGET)
length(TARGETSET_USED)
cat("\nNUM of TFS:")
cat(length(TFSET))
cat("\nTARGET POOLSIZE:")
cat(TARGET_POOLSIZE)
TARGETSET_USED <- unique(tf2target_net$TARGET)
cat("\nNUM of TARGETS USED:")
cat(length(TARGETSET_USED))
