rm(list = ls())
library(NetAct)
outdir <- "./act/"
dir.create(outdir)
act.all  <- list()
# Load racipe expressions
exp_df <- read.csv(file = '/Users/a.katebi/research/netact/benchmark/sim.racipe/net30tf.states.exp_noise-level-0.7.csv', header=TRUE, row.names = 1)
exp_df <- as.matrix(exp_df)
rm(list = ls())
library(viper)
library(dorothea)
source('/Users/a.katebi/research/netact/benchmark/sim.viper/src/regDB2df.R')
outdir <- "./act/"
rm(list = ls())
rm(list = ls())
outdir <- "./act/"
dir.create(outdir)
# RACIPE expressions
#-------------------
exp_df <- read.table(file = '/Users/a.katebi/research/netact/benchmark/sim.racipe/net30tf.states.exp.txt' , header=TRUE)
obs_ids <- c(paste0('M', exp_df$MODEL_NO)); row.names(exp_df) <- obs_ids # assign row names
exp_df$NO_STATES <- NULL; exp_df$STATE_NO <- NULL ; exp_df$MODEL_NO <- NULL # delete meta columns
exp_df <- t(exp_df) # put genes in rows, models in columns
# Using regulon DBs with NO perturbed targets
#-------------------------------------------
regdb <- readRDS(file = '/Users/a.katebi/research/netact/benchmark/regDBs/regDB.nopert.rds')
library(AUCell)
calAUcellact <- function(exp_df, regdb){
cells_rankings <- AUCell_buildRankings(exp_df, plotStats = F)
class(cells_rankings)
length(cells_rankings)
rankings <- getRanking(cells_rankings)
aucMaxRank <- ceiling(nrow(rankings)*5/100) # 5%
aucMaxRank
cells_AUC <- AUCell_calcAUC(regdb, cells_rankings, aucMaxRank=aucMaxRank, nCores=1)
act <- getAUC(cells_AUC)
return(act)
}
act <- calAUcellact(exp_df, regdb)
fname_out <- paste0(outdir, 'act.regdb.0.csv')
write.csv(act, file=fname_out, quote = FALSE)
actByRegDB_list  <- list()
# Using regulon DBs with 5 perturbed targets
#-------------------------------------------
regdb.list <- readRDS(file = '/Users/a.katebi/research/netact/benchmark/regDBs/regDBs.5.rds')
actRegDB5 <- lapply(names(regdb.list), function(regdb_name) {
act <- calAUcellact(exp_df, regdb.list[[regdb_name]])
return(act)
}
)
# Using regulon DBs with 5 perturbed targets
#-------------------------------------------
regdb.list <- readRDS(file = '/Users/a.katebi/research/netact/benchmark/regDBs/regDBs.5.rds')
actRegDB <- lapply(names(regdb.list), function(regdb_name) {
act <- calAUcellact(exp_df, regdb.list[[regdb_name]])
return(act)
}
)
names(actRegDB) <- names(regdb.list)
saveRDS(actRegDB, file = paste(outdir, 'act.regdb.5.rds', sep = ''))
actByRegDB_list[['regdb.']] <- actRegDB
# Using regulon DBs with 10 perturbed targets
#-------------------------------------------
regdb.list <- readRDS(file = '/Users/a.katebi/research/netact/benchmark/regDBs/regDBs.10.rds')
actRegDB <- lapply(names(regdb.list), function(regdb_name) {
act <- calAUcellact(exp_df, regdb.list[[regdb_name]])
return(act)
}
)
names(actRegDB) <- names(regdb.list)
saveRDS(actRegDB, file = paste(outdir, 'act.regdb.10.rds', sep = ''))
actByRegDB_list[['regdb.']] <- actRegDB
# Using regulon DBs with 15 perturbed targets
#-------------------------------------------
regdb.list <- readRDS(file = '/Users/a.katebi/research/netact/benchmark/regDBs/regDBs.15.rds')
actRegDB <- lapply(names(regdb.list), function(regdb_name) {
act <- calAUcellact(exp_df, regdb.list[[regdb_name]])
return(act)
}
)
names(actRegDB) <- names(regdb.list)
saveRDS(actRegDB, file = paste(outdir, 'act.regdb.15.rds', sep = ''))
actByRegDB_list[['regdb.']] <- actRegDB
saveRDS(actByRegDB_list, file = paste(outdir, 'act.all.rds', sep = ''))
actByRegDB_list[['regdb.']] <- actRegDB
saveRDS(actByRegDB_list, file = paste(outdir, 'act.all.rds', sep = ''))
rm(list=ls())
NO.SIG.DIGITS <- 4
outdir <- './cor/'
dir.create(outdir)
# Calculate cor for unperturbed regDB
#====================================
act.nopert <- as.matrix(read.csv(file='./act/act.regdb.0.csv', row.names = 1))
dim(act.nopert)
# Load racipe activities
act.racipe.df <- read.table(file = '/Users/a.katebi/research/netact/benchmark/sim.racipe/net30tf.states.txt', header = TRUE)
rownames(act.racipe.df) <- paste('M', act.racipe.df$MODEL_NO, sep = '')
act.racipe <- t(act.racipe.df[, rownames(act.nopert)]) # retain TF activities only
cor.nopert <- diag(cor(t(act.racipe), t(act.nopert), method = 'spearman'))
cor.avg.nopert <- mean(abs(diag(cor(t(act.racipe), t(act.nopert), method = 'spearman'))))
saveRDS(cor.nopert, file = paste(outdir, 'cor.nopert.rds', sep=''))
write.csv(format(cor.avg.nopert, digits = NO.SIG.DIGITS), file = paste(outdir, 'avg.cor.nopert.csv', sep=''), row.names = FALSE, quote = FALSE)
# Calculate cor for all perturbed regulon DBs
#============================================
act.list.by.regdb <- readRDS(file = './act/act.all.rds') # Load activities for all regulon DBs
# First, calculate cor between racipe acvities and calculated activities for each TF and
# then calculate mean of their abs values
cor.avg.list <- lapply(names(act.list.by.regdb), function(regdb.name) { # go over five regDB names of perturbation levels
sapply(names(act.list.by.regdb[[regdb.name]]), function (regdb.id) # go over 100 regDBs at each perturbation level
mean(abs(diag(cor(t(act.racipe), t(act.list.by.regdb[[regdb.name]][[regdb.id]]), method = 'spearman'))))
)
}
)
names(cor.avg.list) <- names(act.list.by.regdb)
saveRDS(cor.avg.list, file = paste(outdir, 'avg.cor.pert.rds', sep = ''))
rm(list=ls())
data_dir <- figdir <- './cor/'
data_dir <- figdir <- './cor/'
cor.avg.list <- readRDS(paste(data_dir, './avg.cor.pert.rds', sep=''))
cor.unperturbed <- read.csv(paste(data_dir, "avg.cor.nopert.csv", sep = ''), header = T )
cor.unperturbed <- unlist(cor.unperturbed)
cor.avg.regDB.5 <- mean(unlist(cor.avg.list$regdb.5))
print(cor.avg.regDB.5)
cor.avg.regDB.10 <- mean(unlist(cor.avg.list$regdb.10))
print(cor.avg.regDB.10)
cor.avg.regDB.15 <- mean(unlist(cor.avg.list$regdb.15))
print(cor.avg.regDB.15)
# Plot correlations
#---------------------
#XLIMIT <- c(0, 1.0)
XLIMIT <- c(0.5, 0.90)
# Plot correlations
#---------------------
#XLIMIT <- c(0, 1.0)
XLIMIT <- c(0.01, 0.90)
#XLIMIT <- c(0.2, 0.55)
#YLIMIT <- c(0, 25)
YLIMIT <- c(0, 45)
figname <- paste(figdir, 'dist.cor.avg.pdf', sep = '')
pdf(file = figname, width=6, height=6,
paper='special', onefile = TRUE)
par(mfrow=c(3,1))
par(mar=c(2.0, 2.0, 1.5, 0.5))  # bottom, left, top, right
hist(unlist(cor.avg.list$regdb.5),  #breaks = breaks,
main = 'Avgerage correlations: regDB 5',  xlim = XLIMIT, ylim = YLIMIT, xlab = '')
abline(v=cor.unperturbed, col='red', lwd=2)
abline(v=cor.avg.regDB.5, col='blue', lwd=2)
hist(unlist(cor.avg.list$regdb.10), #breaks = breaks,
main = 'regDB 10', xlim = XLIMIT, ylim = YLIMIT, xlab = '')
abline(v=cor.unperturbed, col='red', lwd=2)
abline(v=cor.avg.regDB.10, col='blue', lwd=2)
hist(unlist(cor.avg.list$regdb.15), #breaks = breaks,
main = 'regDB 15', xlim = XLIMIT, ylim = YLIMIT, xlab = '')
abline(v=cor.unperturbed, col='red', lwd=2)
abline(v=cor.avg.regDB.15, col='blue', lwd=2)
dev.off()
# Plot correlations
#---------------------
#XLIMIT <- c(0, 1.0)
XLIMIT <- c(0.01, 0.90)
#XLIMIT <- c(0.2, 0.55)
#YLIMIT <- c(0, 25)
YLIMIT <- c(0, 45)
figname <- paste(figdir, 'dist.cor.avg.pdf', sep = '')
par(mfrow=c(3,1))
par(mar=c(2.0, 2.0, 1.5, 0.5))  # bottom, left, top, right
hist(unlist(cor.avg.list$regdb.5),  #breaks = breaks,
main = 'Avgerage correlations: regDB 5',  xlim = XLIMIT, ylim = YLIMIT, xlab = '')
rm(list=ls())
data_dir <- figdir <- './cor/'
cor.avg.list <- readRDS(paste(data_dir, './avg.cor.pert.rds', sep=''))
rm(list=ls())
data_dir <- figdir <- './cor/'
cor.avg.list <- readRDS(paste(data_dir, './avg.cor.pert.rds', sep=''))
cor.unperturbed <- read.csv(paste(data_dir, "avg.cor.nopert.csv", sep = ''), header = T )
cor.unperturbed <- unlist(cor.unperturbed)
cor.avg.regDB.5 <- mean(unlist(cor.avg.list$regdb.5))
cor.avg.list$regdb.5
cor.avg.list
names(cor.avg.list)
rm(list=ls())
NO.SIG.DIGITS <- 4
outdir <- './cor/'
dir.create(outdir)
# Calculate cor for unperturbed regDB
#====================================
act.nopert <- as.matrix(read.csv(file='./act/act.regdb.0.csv', row.names = 1))
dim(act.nopert)
# Load racipe activities
act.racipe.df <- read.table(file = '/Users/a.katebi/research/netact/benchmark/sim.racipe/net30tf.states.txt', header = TRUE)
rownames(act.racipe.df) <- paste('M', act.racipe.df$MODEL_NO, sep = '')
act.racipe <- t(act.racipe.df[, rownames(act.nopert)]) # retain TF activities only
cor.nopert <- diag(cor(t(act.racipe), t(act.nopert), method = 'spearman'))
cor.avg.nopert <- mean(abs(diag(cor(t(act.racipe), t(act.nopert), method = 'spearman'))))
saveRDS(cor.nopert, file = paste(outdir, 'cor.nopert.rds', sep=''))
write.csv(format(cor.avg.nopert, digits = NO.SIG.DIGITS), file = paste(outdir, 'avg.cor.nopert.csv', sep=''), row.names = FALSE, quote = FALSE)
# Calculate cor for all perturbed regulon DBs
#============================================
act.list.by.regdb <- readRDS(file = './act/act.all.rds') # Load activities for all regulon DBs
# First, calculate cor between racipe acvities and calculated activities for each TF and
# then calculate mean of their abs values
cor.avg.list <- lapply(names(act.list.by.regdb), function(regdb.name) { # go over five regDB names of perturbation levels
sapply(names(act.list.by.regdb[[regdb.name]]), function (regdb.id) # go over 100 regDBs at each perturbation level
mean(abs(diag(cor(t(act.racipe), t(act.list.by.regdb[[regdb.name]][[regdb.id]]), method = 'spearman'))))
)
}
)
names(cor.avg.list) <- names(act.list.by.regdb)
names(act.list.by.regdb)
names(act.list.by.regdb )
act.list.by.regdb$regdb.
# Using regulon DBs with 10 perturbed targets
#-------------------------------------------
regdb.list <- readRDS(file = '/Users/a.katebi/research/netact/benchmark/regDBs/regDBs.10.rds')
actRegDB <- lapply(names(regdb.list), function(regdb_name) calAUcellact(exp_df, regdb.list[[regdb_name]]))
# Using regulon DBs with 10 perturbed targets
#-------------------------------------------
regdb.list <- readRDS(file = '/Users/a.katebi/research/netact/benchmark/regDBs/regDBs.10.rds')
actRegDB <- lapply(names(regdb.list), function(regdb_name) calAUcellact(exp_df, regdb.list[[regdb_name]]))
rm(list = ls())
library(AUCell)
calAUcellact <- function(exp_df, regdb){
cells_rankings <- AUCell_buildRankings(exp_df, plotStats = F)
class(cells_rankings)
length(cells_rankings)
rankings <- getRanking(cells_rankings)
aucMaxRank <- ceiling(nrow(rankings)*5/100) # 5%
aucMaxRank
cells_AUC <- AUCell_calcAUC(regdb, cells_rankings, aucMaxRank=aucMaxRank, nCores=1)
act <- getAUC(cells_AUC)
return(act)
}
outdir <- "./act/"
dir.create(outdir)
actByRegDB_list  <- list()
# RACIPE expressions
#-------------------
exp_df <- read.table(file = '/Users/a.katebi/research/netact/benchmark/sim.racipe/net30tf.states.exp.txt' , header=TRUE)
obs_ids <- c(paste0('M', exp_df$MODEL_NO)); row.names(exp_df) <- obs_ids # assign row names
exp_df$NO_STATES <- NULL; exp_df$STATE_NO <- NULL ; exp_df$MODEL_NO <- NULL # delete meta columns
exp_df <- t(exp_df) # put genes in rows, models in columns
# Using regulon DBs with NO perturbed targets
#-------------------------------------------
regdb <- readRDS(file = '/Users/a.katebi/research/netact/benchmark/regDBs/regDB.nopert.rds')
act <- calAUcellact(exp_df, regdb)
fname_out <- paste0(outdir, 'act.regdb.0.csv')
write.csv(act, file=fname_out, quote = FALSE)
# Using regulon DBs with 5 perturbed targets
#-------------------------------------------
regdb.list <- readRDS(file = '/Users/a.katebi/research/netact/benchmark/regDBs/regDBs.5.rds')
actRegDB <- lapply(names(regdb.list), function(regdb_name) calAUcellact(exp_df, regdb.list[[regdb_name]]))
names(regdb.list)
names(actRegDB) <- names(regdb.list)
saveRDS(actRegDB, file = paste(outdir, 'act.regdb.5.rds', sep = ''))
actByRegDB_list[['regdb.']] <- actRegDB
actByRegDB_list[['regdb.5']] <- actRegDB
# Using regulon DBs with 10 perturbed targets
#-------------------------------------------
regdb.list <- readRDS(file = '/Users/a.katebi/research/netact/benchmark/regDBs/regDBs.10.rds')
actRegDB <- lapply(names(regdb.list), function(regdb_name) calAUcellact(exp_df, regdb.list[[regdb_name]]))
names(actRegDB) <- names(regdb.list)
saveRDS(actRegDB, file = paste(outdir, 'act.regdb.10.rds', sep = ''))
rm(list=ls())
data_dir <- figdir <- './cor/'
cor.avg.list <- readRDS(paste(data_dir, './avg.cor.pert.rds', sep=''))
cor.unperturbed <- read.csv(paste(data_dir, "avg.cor.nopert.csv", sep = ''), header = T )
cor.unperturbed <- unlist(cor.unperturbed)
cor.avg.regDB.5 <- mean(unlist(cor.avg.list$regdb.5))
print(cor.avg.regDB.5)
cor.avg.regDB.10 <- mean(unlist(cor.avg.list$regdb.10))
print(cor.avg.regDB.10)
cor.avg.regDB.15 <- mean(unlist(cor.avg.list$regdb.15))
print(cor.avg.regDB.15)
# Plot correlations
#---------------------
#XLIMIT <- c(0, 1.0)
XLIMIT <- c(0.01, 0.90)
#XLIMIT <- c(0.2, 0.55)
#YLIMIT <- c(0, 25)
YLIMIT <- c(0, 45)
par(mfrow=c(3,1))
par(mar=c(2.0, 2.0, 1.5, 0.5))  # bottom, left, top, right
hist(unlist(cor.avg.list$regdb.5),  #breaks = breaks,
main = 'Avgerage correlations: regDB 5',  xlim = XLIMIT, ylim = YLIMIT, xlab = '')
abline(v=cor.unperturbed, col='red', lwd=2)
NO.SIG.DIGITS <- 4
outdir <- './cor/'
dir.create(outdir)
# Calculate cor for unperturbed regDB
#====================================
act.nopert <- as.matrix(read.csv(file='./act/act.regdb.0.csv', row.names = 1))
dim(act.nopert)
# Load racipe activities
act.racipe.df <- read.table(file = '/Users/a.katebi/research/netact/benchmark/sim.racipe/net30tf.states.txt', header = TRUE)
rownames(act.racipe.df) <- paste('M', act.racipe.df$MODEL_NO, sep = '')
act.racipe <- t(act.racipe.df[, rownames(act.nopert)]) # retain TF activities only
cor.nopert <- diag(cor(t(act.racipe), t(act.nopert), method = 'spearman'))
cor.avg.nopert <- mean(abs(diag(cor(t(act.racipe), t(act.nopert), method = 'spearman'))))
saveRDS(cor.nopert, file = paste(outdir, 'cor.nopert.rds', sep=''))
write.csv(format(cor.avg.nopert, digits = NO.SIG.DIGITS), file = paste(outdir, 'avg.cor.nopert.csv', sep=''), row.names = FALSE, quote = FALSE)
# Calculate cor for all perturbed regulon DBs
#============================================
act.list.by.regdb <- readRDS(file = './act/act.all.rds') # Load activities for all regulon DBs
# First, calculate cor between racipe acvities and calculated activities for each TF and
# then calculate mean of their abs values
cor.avg.list <- lapply(names(act.list.by.regdb), function(regdb.name) { # go over five regDB names of perturbation levels
sapply(names(act.list.by.regdb[[regdb.name]]), function (regdb.id) # go over 100 regDBs at each perturbation level
mean(abs(diag(cor(t(act.racipe), t(act.list.by.regdb[[regdb.name]][[regdb.id]]), method = 'spearman'))))
)
}
)
names(cor.avg.list) <- names(act.list.by.regdb)
rm(list=ls())
NO.SIG.DIGITS <- 4
outdir <- './cor/'
dir.create(outdir)
# Calculate cor for unperturbed regDB
#====================================
act.nopert <- as.matrix(read.csv(file='./act/act.regdb.0.csv', row.names = 1))
dim(act.nopert)
# Load racipe activities
act.racipe.df <- read.table(file = '/Users/a.katebi/research/netact/benchmark/sim.racipe/net30tf.states.txt', header = TRUE)
rownames(act.racipe.df) <- paste('M', act.racipe.df$MODEL_NO, sep = '')
act.racipe <- t(act.racipe.df[, rownames(act.nopert)]) # retain TF activities only
cor.nopert <- diag(cor(t(act.racipe), t(act.nopert), method = 'spearman'))
cor.avg.nopert <- mean(abs(diag(cor(t(act.racipe), t(act.nopert), method = 'spearman'))))
cor.avg.nopert
rm(list=ls())
NO.SIG.DIGITS <- 4
outdir <- './cor/'
dir.create(outdir)
# Calculate cor for unperturbed regDB
#====================================
act.nopert <- as.matrix(read.csv(file='./act/act.regdb.0.csv', row.names = 1))
dim(act.nopert)
# Load racipe activities
act.racipe.df <- read.table(file = '/Users/a.katebi/research/netact/benchmark/sim.racipe/net30tf.states.txt', header = TRUE)
rownames(act.racipe.df) <- paste('M', act.racipe.df$MODEL_NO, sep = '')
act.racipe <- t(act.racipe.df[, rownames(act.nopert)]) # retain TF activities only
cor.nopert <- diag(cor(t(act.racipe), t(act.nopert), method = 'spearman'))
cor.avg.nopert <- mean(abs(diag(cor(t(act.racipe), t(act.nopert), method = 'spearman'))))
saveRDS(cor.nopert, file = paste(outdir, 'cor.nopert.rds', sep=''))
write.csv(format(cor.avg.nopert, digits = NO.SIG.DIGITS), file = paste(outdir, 'avg.cor.nopert.csv', sep=''), row.names = FALSE, quote = FALSE)
cor.avg.nopert
saveRDS(cor.nopert, file = paste(outdir, 'cor.nopert.rds', sep=''))
write.csv(format(cor.avg.nopert, digits = NO.SIG.DIGITS), file = paste(outdir, 'avg.cor.nopert.csv', sep=''), row.names = FALSE, quote = FALSE)
# Calculate cor for all perturbed regulon DBs
#============================================
act.list.by.regdb <- readRDS(file = './act/act.all.rds') # Load activities for all regulon DBs
# First, calculate cor between racipe acvities and calculated activities for each TF and
# then calculate mean of their abs values
cor.avg.list <- lapply(names(act.list.by.regdb), function(regdb.name) { # go over five regDB names of perturbation levels
sapply(names(act.list.by.regdb[[regdb.name]]), function (regdb.id) # go over 100 regDBs at each perturbation level
mean(abs(diag(cor(t(act.racipe), t(act.list.by.regdb[[regdb.name]][[regdb.id]]), method = 'spearman'))))
)
}
)
names(cor.avg.list) <- names(act.list.by.regdb)
saveRDS(cor.avg.list, file = paste(outdir, 'avg.cor.pert.rds', sep = ''))
medianCor <- sapply(names(cor.avg.list), function(regdb.name) median(cor.avg.list[[regdb.name]]))
medianCor
medianCor <- cbind(names(medianCor), as.numeric(medianCor))
View(medianCor)
medianCor <- sapply(names(cor.avg.list), function(regdb.name) median(cor.avg.list[[regdb.name]]))
medianCor <- names(cor.avg.list)
medianCor <- cbind(names(medianCor), as.numeric(medianCor))
medianCor <- sapply(names(cor.avg.list), function(regdb.name) median(cor.avg.list[[regdb.name]]))
medianCor <- names(cor.avg.list)
medianCor <- cbind(names(medianCor), as.numeric(medianCor))
medianCor <- sapply(names(cor.avg.list), function(regdb.name) median(cor.avg.list[[regdb.name]]))
medianCor <- names(cor.avg.list)
medianCor
medianCor <- cbind(names(medianCor), as.numeric(medianCor))
View(medianCor)
medianCor <- sapply(names(cor.avg.list), function(regdb.name) median(cor.avg.list[[regdb.name]]))
medianCor <- names(cor.avg.list)
medianCor <- sapply(names(cor.avg.list), function(regdb.name) median(cor.avg.list[[regdb.name]]))
names(medianCor) <- names(cor.avg.list)
medianCor <- cbind(names(medianCor), as.numeric(medianCor))
colnames(medianCor) <- c('pert_level', 'median_cor')
write.csv(format(medianCor, digits = NO.SIG.DIGITS), file = paste(outdir, 'median.cor.pert.csv', sep=''), row.names = FALSE, quote = FALSE)
getwd()
outdir]
outdir
