rCall
sum(dupStatus)
nrow(regNet.df)
inferredNet.retained.df <- inferredNet.df[inferredNet.df$importance.normed>tsh, c(1, 2)]
colnames(inferredNet.retained.df) <- colnames(regNet.df)
dupStatus <- duplicated(inferredNet.retained.df)
sum(dupStatus)
View(inferredNet.retained.df)
inferredNet.retained.df <- inferredNet.retained.df[!dupStatus,] # remove duplicated interactions
combInt.df <- rbind(regNet.df, inferredNet.retained.df)
dupStatus <- duplicated(combInt.df)
rCall <- sum(dupStatus)/nrow(regNet.df)
rCall
importance.tsh <- c(0.01, 0.03, 0.05, .07, .09, 0.10)
rCall.list <- sapply(importance.tsh, function(tsh) {
#tsh <- importance.tsh[1]
inferredNet.retained.df <- inferredNet.df[inferredNet.df$importance.normed>tsh, c(1, 2)]
colnames(inferredNet.retained.df) <- colnames(regNet.df)
dupStatus <- duplicated(inferredNet.retained.df)
inferredNet.retained.df <- inferredNet.retained.df[!dupStatus,] # remove duplicated interactions
combInt.df <- rbind(regNet.df, inferredNet.retained.df)
dupStatus <- duplicated(combInt.df)
rCall <- sum(dupStatus)/nrow(regNet.df)
return(rCall)
})
rCall.list
par(mfrow=c(2,1))
par(mar=c(2.5, 3.0, 1.5, 1.0))  # bottom, left, top, right
par(mgp=c(1.5, 0.4, 0))
par(oma=c(3, 1, 1, 1)) # all sides have 3 lines of space
#hist(inferredNet.df$importance, xlab = 'importance score', ylab = 'count' , main = '')
hist(inferredNet.df$importance.normed, xlab = 'importance score', ylab = 'count' , main = '')
plot(rCall.list, #xlim = c(1, length(rCall.list)),
lty=1, pch=19,
ylim = c(0, 1), xlab = 'importance score threshold', ylab = 'recall',
xaxt = "n")
par(mfrow=c(2,1))
par(mar=c(2.5, 3.0, 1.5, 1.0))  # bottom, left, top, right
par(mgp=c(1.5, 0.4, 0))
par(oma=c(3, 1, 1, 1)) # all sides have 3 lines of space
#hist(inferredNet.df$importance, xlab = 'importance score', ylab = 'count' , main = '')
hist(inferredNet.df$importance.normed, xlab = 'importance score', ylab = 'count' , main = '')
plot(rCall.list, #xlim = c(1, length(rCall.list)),
lty=1, pch=19,
ylim = c(0, 1), xlab = 'importance score threshold', ylab = 'recall',
xaxt = "n")
lines(rCall.list, lty=2)
axis(1,                         # Define x-axis manually
at = 1:length(importance.tsh),
labels = importance.tsh)
importance.tsh <- c(0.01, 0.04, 0.07, 0.10, 0.13, 0.16)  #c(0.05, 0.10, 0.15, 0.20, 0.25, 0.30) #c(2, 4, 6, 7, 8, 10)
rCall.list <- sapply(importance.tsh, function(tsh) {
#tsh <- importance.tsh[1]
inferredNet.retained.df <- inferredNet.df[inferredNet.df$importance.normed>tsh, c(1, 2)]
colnames(inferredNet.retained.df) <- colnames(regNet.df)
dupStatus <- duplicated(inferredNet.retained.df)
inferredNet.retained.df <- inferredNet.retained.df[!dupStatus,] # remove duplicated interactions
combInt.df <- rbind(regNet.df, inferredNet.retained.df)
dupStatus <- duplicated(combInt.df)
rCall <- sum(dupStatus)/nrow(regNet.df)
return(rCall)
})
rCall.list
par(mfrow=c(2,1))
par(mar=c(2.5, 3.0, 1.5, 1.0))  # bottom, left, top, right
par(mgp=c(1.5, 0.4, 0))
par(oma=c(3, 1, 1, 1)) # all sides have 3 lines of space
#hist(inferredNet.df$importance, xlab = 'importance score', ylab = 'count' , main = '')
hist(inferredNet.df$importance.normed, xlab = 'importance score', ylab = 'count' , main = '')
plot(rCall.list, #xlim = c(1, length(rCall.list)),
lty=1, pch=19,
ylim = c(0, 1), xlab = 'importance score threshold', ylab = 'recall',
xaxt = "n")
lines(rCall.list, lty=2)
axis(1,                         # Define x-axis manually
at = 1:length(importance.tsh),
labels = importance.tsh)
importance.tsh <- c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6)  #c(0.05, 0.10, 0.15, 0.20, 0.25, 0.30) #c(2, 4, 6, 7, 8, 10)
rCall.list <- sapply(importance.tsh, function(tsh) {
#tsh <- importance.tsh[1]
inferredNet.retained.df <- inferredNet.df[inferredNet.df$importance.normed>tsh, c(1, 2)]
colnames(inferredNet.retained.df) <- colnames(regNet.df)
dupStatus <- duplicated(inferredNet.retained.df)
inferredNet.retained.df <- inferredNet.retained.df[!dupStatus,] # remove duplicated interactions
combInt.df <- rbind(regNet.df, inferredNet.retained.df)
dupStatus <- duplicated(combInt.df)
rCall <- sum(dupStatus)/nrow(regNet.df)
return(rCall)
})
rCall.list
par(mfrow=c(2,1))
par(mar=c(2.5, 3.0, 1.5, 1.0))  # bottom, left, top, right
par(mgp=c(1.5, 0.4, 0))
par(oma=c(3, 1, 1, 1)) # all sides have 3 lines of space
#hist(inferredNet.df$importance, xlab = 'importance score', ylab = 'count' , main = '')
hist(inferredNet.df$importance.normed, xlab = 'importance score', ylab = 'count' , main = '')
plot(rCall.list, #xlim = c(1, length(rCall.list)),
lty=1, pch=19,
ylim = c(0, 1), xlab = 'importance score threshold', ylab = 'recall',
xaxt = "n")
lines(rCall.list, lty=2)
axis(1,                         # Define x-axis manually
at = 1:length(importance.tsh),
labels = importance.tsh)
plot(rCall.list, #xlim = c(1, length(rCall.list)),
lty=1, pch=19,
ylim = c(0, 1), xlab = 'importance score threshold', ylab = 'recall',
xaxt = "n")
axis(1,                         # Define x-axis manually
at = 1:length(importance.tsh),
labels = importance.tsh)
lines(rCall.list, lty=2)
WIDTH <- 4
HEIGHT <- 8
figname <- paste(figdir, 'performance-', WIDTH, 'x', HEIGHT,'.pdf', sep = '')
pdf(file = figname, width=WIDTH , height=HEIGHT, paper='special', onefile = TRUE)
par(mfrow=c(2,1))
par(mar=c(2.5, 3.0, 1.5, 1.0))  # bottom, left, top, right
par(mgp=c(1.5, 0.4, 0))
par(oma=c(3, 1, 1, 1)) # all sides have 3 lines of space
#hist(inferredNet.df$importance, xlab = 'importance score', ylab = 'count' , main = '')
hist(inferredNet.df$importance.normed, xlab = 'importance score', ylab = 'count' , main = '')
plot(rCall.list, #xlim = c(1, length(rCall.list)),
lty=1, pch=19,
ylim = c(0, 1), xlab = 'importance score threshold', ylab = 'recall',
xaxt = "n")
axis(1,                         # Define x-axis manually
at = 1:length(importance.tsh),
labels = importance.tsh)
lines(rCall.list, lty=2)
dev.off()
getwd()
source('./functions.R')
rm(list = ls())
importance.tsh <- c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6)  #c(0.05, 0.10, 0.15, 0.20, 0.25, 0.30) #c(2, 4, 6, 7, 8, 10)
source('./functions.R')
regNetDir <- '../../regNet/data/'
figdir <- "./figs/"
dir.create(figdir)
inferredNet.df <- read.delim(file = './output.tsv', sep = '\t')
regNetDir <- '../../regNet/data/'
figdir <- "./figs/"
dir.create(figdir)
inferredNet.df <- read.delim(file = './output.tsv', sep = '\t')
source('./functions.R')
# NOT RUN {
# 2-dimensional example
# loading data
data(hacide)
# NOT RUN {
# 2-dimensional example
# loading data
install.packages('hacide')
#install.packages('hacide')
data(hacide)
#install.packages('hacide')
install.packages('ROSE')
#install.packages('hacide')
#install.packages('ROSE')
data(hacide)
#install.packages('hacide')
#install.packages('ROSE')
library(ROSE)
data(hacide)
# check imbalance on training set
table(hacide.train$cls)
View(hacide.train)
# model estimation using logistic regression
fit.hacide  <- glm(cls~., data=hacide.train, family="binomial")
View(fit.hacide)
class(fit.hacide)
# prediction on training set
pred.hacide.train <- predict(fit.hacide, newdata=hacide.train)
# prediction on training set
pred.hacide.train <- predict(fit.hacide, newdata=hacide.train)
# plot the ROC curve (training set)
roc.curve(hacide.train$cls, pred.hacide.train,
main="ROC curve \n (Half circle depleted data)")
# check imbalance on test set
table(hacide.test$cls)
# prediction using test set
pred.hacide.test <- predict(fit.hacide, newdata=hacide.test)
# add the ROC curve (test set)
roc.curve(hacide.test$cls, pred.hacide.test, add=TRUE, col=2,
lwd=2, lty=2)
legend("topleft", c("Resubstitution estimate", "Holdout estimate"),
col=1:2, lty=1:2, lwd=2)
# plot the ROC curve (training set)
roc.curve(hacide.train$cls, pred.hacide.train,
main="ROC curve \n (Half circle depleted data)")
# add the ROC curve (test set)
roc.curve(hacide.test$cls, pred.hacide.test, add=TRUE, col=2,
lwd=2, lty=2)
?roc.curve
# add the ROC curve (test set)
roc.curve(hacide.test$cls, pred.hacide.test, add=TRUE, col=2,
lwd=2, lty=2)
legend("topleft", c("Resubstitution estimate", "Holdout estimate"),
col=1:2, lty=1:2, lwd=2)
# plot the ROC curve (training set)
roc.curve(hacide.train$cls, pred.hacide.train,
main="ROC curve \n (Half circle depleted data)")
# check imbalance on test set
table(hacide.test$cls)
# prediction using test set
pred.hacide.test <- predict(fit.hacide, newdata=hacide.test)
# add the ROC curve (test set)
roc.curve(hacide.test$cls, pred.hacide.test, add=TRUE, col=2,
lwd=2, lty=2)
legend("topleft", c("Resubstitution estimate", "Holdout estimate"),
col=1:2, lty=1:2, lwd=2)
rCall.list
# calculate recall
rCall.list <- sapply(importance.tsh, function(tsh) {
#tsh <- importance.tsh[1]
inferredNet.retained.df <- inferredNet.df[inferredNet.df$importance.normed>tsh, c(1, 2)]
colnames(inferredNet.retained.df) <- colnames(regNet.df)
dupStatus <- duplicated(inferredNet.retained.df)
inferredNet.retained.df <- inferredNet.retained.df[!dupStatus,] # remove duplicated interactions
combInt.df <- rbind(regNet.df, inferredNet.retained.df)
dupStatus <- duplicated(combInt.df)
rCall <- sum(dupStatus)/nrow(regNet.df)
return(rCall)
})
rm(list = ls())
importance.tsh <- c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6)  #c(0.05, 0.10, 0.15, 0.20, 0.25, 0.30) #c(2, 4, 6, 7, 8, 10)
source('./functions.R')
regNetDir <- '../../regNet/data/'
figdir <- "./figs/"
dir.create(figdir)
inferredNet.df <- read.delim(file = './output.tsv', sep = '\t')
inferredNet.df <- inferredNet.df[, c(2, 3, 4)] # first column
inferredNet.df <- format_source_target_nodes(inputNet.df = inferredNet.df)
inferredNet.df$importance <- as.numeric(inferredNet.df$importance)
dupStatus <- duplicated(inferredNet.df )
sum(dupStatus)
dim(inferredNet.df)
inferredNet.df <- inferredNet.df[!dupStatus, ] # remove duplicated interactions
dim(inferredNet.df)
nodes.all <- unique(union(inferredNet.df$TF, inferredNet.df$target))
nodes.all <- sort(nodes.all)
length(nodes.all) # 30 - only TFs
regNet.df <- read.delim2(file = paste0(regNetDir, 'net30tf.tpo'), sep = '\t')
regNet.df <- format_source_target_nodes(inputNet.df = regNet.df)
regNet.df <- regNet.df[,c(1,2)] # retain only source and target
dupStatus <- duplicated(regNet.df)
sum(dupStatus)
regNet.df <- regNet.df[!dupStatus, ] # remove duplicated interactions
dim(regNet.df)
nodes.all.regNet <- sort(unique(union(regNet.df$SOURCE, regNet.df$TARGET)))
length(nodes.all.regNet)  # 447 - nodes are TFs and targets in the regulatory network
# remove interactions involving TF targets (starting with tg)
regNet.df <- regNet.df[!(startsWith(regNet.df$SOURCE, 'tg') | startsWith(regNet.df$TARGET, 'tg')), ]
dim(regNet.df)
hist(inferredNet.df$importance, xlab = 'importance score', ylab = 'count' , main = '')
inferredNet.df$importance.normed <- (inferredNet.df$importance-min(inferredNet.df$importance))/(max(inferredNet.df$importance)-min(inferredNet.df$importance))
hist(inferredNet.df$importance.normed)
sum(inferredNet.df$importance> 4) #435
# calculate recall
rCall.list <- sapply(importance.tsh, function(tsh) {
#tsh <- importance.tsh[1]
inferredNet.retained.df <- inferredNet.df[inferredNet.df$importance.normed>tsh, c(1, 2)]
colnames(inferredNet.retained.df) <- colnames(regNet.df)
dupStatus <- duplicated(inferredNet.retained.df)
inferredNet.retained.df <- inferredNet.retained.df[!dupStatus,] # remove duplicated interactions
combInt.df <- rbind(regNet.df, inferredNet.retained.df)
dupStatus <- duplicated(combInt.df)
rCall <- sum(dupStatus)/nrow(regNet.df)
return(rCall)
})
# calculate precision and recall
ppvRcall.list <- sapply(importance.tsh, function(tsh) {
#tsh <- importance.tsh[1]
inferredNet.retained.df <- inferredNet.df[inferredNet.df$importance.normed>tsh, c(1, 2)]
colnames(inferredNet.retained.df) <- colnames(regNet.df)
dupStatus <- duplicated(inferredNet.retained.df)
inferredNet.retained.df <- inferredNet.retained.df[!dupStatus,] # remove duplicated interactions
combInt.df <- rbind(regNet.df, inferredNet.retained.df)
dupStatus <- duplicated(combInt.df)
rCall <- sum(dupStatus)/nrow(regNet.df) # calculate recall
#return(rCall)
ppv <- sum(dupStatus)/nrow(inferredNet.retained.df) # calculate precision/positive predictive value
ppvRcall <- list("ppv"=ppv, "rCall"=rCall)
return(ppvRcall)
})
# calculate precision and recall
ppvRcall.list <- sapply(importance.tsh, function(tsh) {
#tsh <- importance.tsh[1]
inferredNet.retained.df <- inferredNet.df[inferredNet.df$importance.normed>tsh, c(1, 2)]
colnames(inferredNet.retained.df) <- colnames(regNet.df)
dupStatus <- duplicated(inferredNet.retained.df)
inferredNet.retained.df <- inferredNet.retained.df[!dupStatus,] # remove duplicated interactions
combInt.df <- rbind(regNet.df, inferredNet.retained.df)
dupStatus <- duplicated(combInt.df)
rCall <- sum(dupStatus)/nrow(regNet.df) # calculate recall
#return(rCall)
ppv <- sum(dupStatus)/nrow(inferredNet.retained.df) # calculate precision/positive predictive value
ppvRcall <- list("ppv"=ppv, "rCall"=rCall)
return(ppvRcall)
})
class(ppvRcall.list)
View(ppvRcall.list)
dim(ppvRcall.list)
ppvRcall.list <- t(ppvRcall.list)
rCall.list
par(mfrow=c(1,1))
par(mar=c(2.5, 3.0, 1.5, 1.0))  # bottom, left, top, right
par(mgp=c(1.5, 0.4, 0))
par(oma=c(3, 1, 1, 1)) # all sides have 3 lines of space
plot(rCall.list, #xlim = c(1, length(rCall.list)),
lty=1, pch=19,
ylim = c(0, 1), xlab = 'importance score threshold', ylab = 'recall',
xaxt = "n")
par(mfrow=c(1,1))
par(mar=c(2.5, 3.0, 1.5, 1.0))  # bottom, left, top, right
par(mgp=c(1.5, 0.4, 0))
par(oma=c(3, 1, 1, 1)) # all sides have 3 lines of space
plot(rCall.list, #xlim = c(1, length(rCall.list)),
lty=1, pch=19,
ylim = c(0, 1), xlab = 'importance score threshold', ylab = 'recall',
xaxt = "n")
axis(1,                         # Define x-axis manually
at = 1:length(importance.tsh),
labels = importance.tsh)
lines(rCall.list, lty=2)
class(ppvRcall.list)
ppvRcall.list[,'ppv']
ppvRcall.list['ppv']
ppvRcall.list[,'ppv']
ppvRcall.list[,1]
ppvRcall.list[[,1]]
class(ppvRcall.list)
ppvRcall.list[[,1]]
# calculate precision and recall
ppvRcall.list <- sapply(importance.tsh, function(tsh) {
#tsh <- importance.tsh[1]
inferredNet.retained.df <- inferredNet.df[inferredNet.df$importance.normed>tsh, c(1, 2)]
colnames(inferredNet.retained.df) <- colnames(regNet.df)
dupStatus <- duplicated(inferredNet.retained.df)
inferredNet.retained.df <- inferredNet.retained.df[!dupStatus,] # remove duplicated interactions
combInt.df <- rbind(regNet.df, inferredNet.retained.df)
dupStatus <- duplicated(combInt.df)
rCall <- sum(dupStatus)/nrow(regNet.df) # calculate recall
#return(rCall)
ppv <- sum(dupStatus)/nrow(inferredNet.retained.df) # calculate precision/positive predictive value
ppvRcall <- c("ppv"=ppv, "rCall"=rCall)
return(ppvRcall)
})
rCall.list
class(ppvRcall.list)
dim(ppvRcall.list)
ppvRcall.list <- t(ppvRcall.list)
class(ppvRcall.list)
class(ppvRcall.list[,1])
class(ppvRcall.list[,'ppv'])
ppvRcall.list[,'ppv']
class(ppvRcall.list[,'rCall'])
plot(ppvRcall.list[,'rCall'], #rCall.list, #xlim = c(1, length(rCall.list)),
lty=1, pch=19,
ylim = c(0, 1), xlab = 'importance score threshold', ylab = 'recall',
xaxt = "n")
axis(1,                         # Define x-axis manually
at = 1:length(importance.tsh),
labels = importance.tsh)
lines(rCall.list, lty=2)
WIDTH <- 4
HEIGHT <- 4
figname <- paste(figdir, 'rCall-', WIDTH, 'x', HEIGHT,'.pdf', sep = '')
pdf(file = figname, width=WIDTH , height=HEIGHT, paper='special', onefile = TRUE)
par(mfrow=c(1,1))
par(mar=c(2.5, 3.0, 1.5, 1.0))  # bottom, left, top, right
par(mgp=c(1.5, 0.4, 0))
par(oma=c(3, 1, 1, 1)) # all sides have 3 lines of space
plot(ppvRcall.list[,'rCall'], #rCall.list, #xlim = c(1, length(rCall.list)),
lty=1, pch=19,
ylim = c(0, 1), xlab = 'importance score threshold', ylab = 'recall',
xaxt = "n")
axis(1,                         # Define x-axis manually
at = 1:length(importance.tsh),
labels = importance.tsh)
lines(rCall.list, lty=2)
dev.off()
par(mfrow=c(1,1))
par(mar=c(2.5, 3.0, 1.5, 1.0))  # bottom, left, top, right
par(mgp=c(1.5, 0.4, 0))
par(oma=c(3, 1, 1, 1)) # all sides have 3 lines of space
plot(ppvRcall.list[,'rppv'],
lty=1, pch=19,
ylim = c(0, 1), xlab = 'importance score threshold', ylab = 'recall',
xaxt = "n")
plot(ppvRcall.list[,'rCall'],
lty=1, pch=19,
ylim = c(0, 1), xlab = 'importance score threshold', ylab = 'recall',
xaxt = "n")
axis(1,                         # Define x-axis manually
at = 1:length(importance.tsh),
labels = importance.tsh)
lines(rCall.list, lty=2)
par(mfrow=c(1,1))
par(mar=c(2.5, 3.0, 1.5, 1.0))  # bottom, left, top, right
par(mgp=c(1.5, 0.4, 0))
par(oma=c(3, 1, 1, 1)) # all sides have 3 lines of space
plot(ppvRcall.list[,'ppv'],
lty=1, pch=19,
ylim = c(0, 1), xlab = 'importance score threshold', ylab = 'recall',
xaxt = "n")
axis(1,                         # Define x-axis manually
at = 1:length(importance.tsh),
labels = importance.tsh)
lines(rCall.list, lty=2)
lines(ppvRcall.list[,'ppv'], lty=2)
par(mfrow=c(1,1))
par(mar=c(2.5, 3.0, 1.5, 1.0))  # bottom, left, top, right
par(mgp=c(1.5, 0.4, 0))
par(oma=c(3, 1, 1, 1)) # all sides have 3 lines of space
plot(ppvRcall.list[,'ppv'],
lty=1, pch=19,
ylim = c(0, 1), xlab = 'importance score threshold', ylab = 'recall',
xaxt = "n")
axis(1,                         # Define x-axis manually
at = 1:length(importance.tsh),
labels = importance.tsh)
lines(ppvRcall.list[,'ppv'], lty=2)
par(mfrow=c(1,1))
par(mar=c(2.5, 3.0, 1.5, 1.0))  # bottom, left, top, right
par(mgp=c(1.5, 0.4, 0))
par(oma=c(3, 1, 1, 1)) # all sides have 3 lines of space
plot(ppvRcall.list[,'rCall'],
lty=1, pch=19,
ylim = c(0, 1), xlab = 'importance score threshold', ylab = 'recall',
xaxt = "n")
axis(1,                         # Define x-axis manually
at = 1:length(importance.tsh),
labels = importance.tsh)
lines(ppvRcall.list[,'rCall'], lty=2)
par(mfrow=c(1,1))
par(mar=c(2.5, 3.0, 1.5, 1.0))  # bottom, left, top, right
par(mgp=c(1.5, 0.4, 0))
par(oma=c(3, 1, 1, 1)) # all sides have 3 lines of space
plot(ppvRcall.list[,'ppv'],
lty=1, pch=19,
ylim = c(0, 1), xlab = 'importance score threshold', ylab = 'precision',
xaxt = "n")
axis(1,                         # Define x-axis manually
at = 1:length(importance.tsh),
labels = importance.tsh)
lines(ppvRcall.list[,'ppv'], lty=2)
plot(ppvRcall.list[,'rCall'], ppvRcall.list[,'ppv'],
lty=1, pch=19,
ylim = c(0, 1), xlab = 'importance score threshold', ylab = 'precision',
xaxt = "n")
plot(ppvRcall.list[,'rCall'], ppvRcall.list[,'ppv'],
lty=1, pch=19,
xlim = c(0, 1),
ylim = c(0, 1),
xlab = 'recall', ylab = 'precision')
# axis(1,                         # Define x-axis manually
#      at = 1:length(importance.tsh),
#      labels = importance.tsh)
lines(ppvRcall.list[,'rCall'], ppvRcall.list[,'ppv'], lty=2)
par(mfrow=c(1,1))
par(mar=c(2.5, 3.0, 1.5, 1.0))  # bottom, left, top, right
par(mgp=c(1.5, 0.4, 0))
par(oma=c(3, 1, 1, 1)) # all sides have 3 lines of space
plot(ppvRcall.list[,'rCall'], ppvRcall.list[,'ppv'],
lty=1, pch=19,
xlim = c(0, 1),
ylim = c(0, 1),
xlab = 'recall', ylab = 'precision')
# axis(1,                         # Define x-axis manually
#      at = 1:length(importance.tsh),
#      labels = importance.tsh)
lines(ppvRcall.list[,'rCall'], ppvRcall.list[,'ppv'], lty=2)
par(mfrow=c(1,1))
par(mar=c(2.5, 3.0, 1.5, 1.0))  # bottom, left, top, right
par(mgp=c(1.5, 0.4, 0))
par(oma=c(3, 1, 1, 1)) # all sides have 3 lines of space
plot(ppvRcall.list[,'rCall'], ppvRcall.list[,'ppv'],
lty=1, pch=19,
xlim = c(0, 1),
ylim = c(0, 1),
xlab = 'recall', ylab = 'precision')
lines(ppvRcall.list[,'rCall'], ppvRcall.list[,'ppv'], lty=2)
getwd()
# calculate precision and recall
ppvRcall <- sapply(importance.tsh, function(tsh) {
#tsh <- importance.tsh[1]
inferredNet.retained.df <- inferredNet.df[inferredNet.df$importance.normed>tsh, c(1, 2)]
colnames(inferredNet.retained.df) <- colnames(regNet.df)
dupStatus <- duplicated(inferredNet.retained.df)
inferredNet.retained.df <- inferredNet.retained.df[!dupStatus,] # remove duplicated interactions
combInt.df <- rbind(regNet.df, inferredNet.retained.df)
dupStatus <- duplicated(combInt.df)
rCall <- sum(dupStatus)/nrow(regNet.df) # calculate recall
#return(rCall)
ppv <- sum(dupStatus)/nrow(inferredNet.retained.df) # calculate precision/positive predictive value
ppvRcall <- c("ppv"=ppv, "rCall"=rCall)
return(ppvRcall)
})
class(ppvRcall)
dim(ppvRcall)
ppvRcall <- t(ppvRcall)
class(ppvRcall)
class(ppvRcall[,'rCall'])
View(ppvRcall)
write.table(ppvRcall, file = paste(outdir, 'precision-recall.tsv', sep = ''),
row.names=FALSE, sep="\t", quote = F, col.names = F)
outdir <- './data/'
write.table(ppvRcall, file = paste(outdir, 'precision-recall.tsv', sep = ''),
row.names=FALSE, sep="\t", quote = F, col.names = F)
write.table(format(ppvRcall, digits = 4), file = paste(outdir, 'precision-recall.tsv', sep = ''),
row.names=FALSE, sep="\t", quote = F, col.names = T)
