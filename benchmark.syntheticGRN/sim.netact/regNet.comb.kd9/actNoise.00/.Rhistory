for(tf in colnames(act.nca)){
cor.tmp[[tf]] <- cor(as.numeric(act.racipe[,tf]),
as.numeric(act.nca[,tf]),
method = 'spearman')
}
#cor.avg <- mean(abs(unlist(cor.tmp)))
cor.avg.list[[regdb.id]] <- mean(abs(unlist(cor.tmp)))
}
return(cor.avg.list)
}
#=========================
# Load act with no perturbation
acts.nopert.df <- read.csv(file='./acts/act.regDB.0.csv', row.names = 1); acts.nopert.df <- t(acts.nopert.df)
dim(acts.nopert.df)
View(acts.nopert.df)
View(acts.nopert.df)
acts <- t(acts)
write.csv(acts, file=paste0(outdir, 'acts.regDB.0.csv'), quote = FALSE)
"Calculateactivities using perturbed regulon DBs"
rm(list = ls())
library(NetAct)
outdir <- "./acts/"
dir.create(outdir)
# Function definitions
#=====================#
cal_netact_act_by_regDB <- function(regdb.list, exp_df, DEresult){
actByRegDB <- list()
for (regdb_name in names(regdb.list)) {
regdb <- regdb.list[[regdb_name]]
acts = TF_Activity(names(regdb), regdb, exp_df, DEresult, with_weight = FALSE)
acts = acts$all_activities
actByRegDB[[regdb_name]] <- t(acts)
#break
}
return(actByRegDB)
}
#=====================#
# Activities for regulon DB with NO perturbation
# Load regulon DB
#-----------------#
fname.regdb <- '/Users/a.katebi/research/netact/benchmark/regDBs/regDB.nopert.rds'
regdb <- readRDS(file = fname.regdb)
tfs <- names(regdb)
targets <- unique(unlist(regdb))
length(targets)
# Load RACIPE expressions
#-------------------------
fname_states_exp_txt <- '/Users/a.katebi/research/netact/benchmark/sim.racipe/net30tf.states.exp.txt'
exp_df <- read.table(file = fname_states_exp_txt, header=TRUE)
row.names(exp_df) <- c(paste0('M', exp_df$MODEL_NO)) # create and assign row names
exp_df$NO_STATES <- NULL; exp_df$STATE_NO <- NULL ; exp_df$MODEL_NO <- NULL # delete meta columns
#exp_df <- exp_df[, targets] # retain target expressions only
dim(exp_df)
exp_df <- t(exp_df) # put genes in rows, models in columns
# create DEresult object
#-----------------------
# Create an DE result list object containing a table with on column named 'padj'
DEresult <- list()
myTable <- as.data.frame(matrix(nrow = nrow(exp_df), ncol = 1),
col.names=c('padj'))
colnames(myTable) <- c('padj')
rownames(myTable) <- rownames(exp_df)
myTable$padj <- 1
DEresult$table <- myTable
# calculate TF activity using expression data as matrix:
acts = TF_Activity(names(regdb), regdb, exp_df, DEresult, with_weight = FALSE)
acts = acts$all_activities
#expTFs <- exp_df[rownames(acts),]
acts <- t(acts)
write.csv(acts, file=paste0(outdir, 'acts.regDB.0.csv'), quote = FALSE)
#=========================
# Load act with no perturbation
acts.nopert.df <- read.csv(file='./acts/act.regDB.0.csv', row.names = 1); acts.nopert.df <- t(acts.nopert.df)
dim(acts.nopert.df)
View(acts.nopert.df)
getwd()
#=========================
# Load act with no perturbation
acts.nopert.df <- read.csv(file='./acts/acts.regDB.0.csv', row.names = 1); acts.nopert.df <- t(acts.nopert.df)
dim(acts.nopert.df)
View(acts.nopert.df)
rm(list=ls())
dir.cor <- './cors/'
dir.create(dir.cor)
# Function Definitions
cal.cor.across_models <- function(act.racipe, nca.act.list){
cor.avg.list <- list()
for(regdb.id in names(nca.act.list)){
act.nca <- nca.act.list[[regdb.id]]
cor.tmp <- list()
for(tf in colnames(act.nca)){
cor.tmp[[tf]] <- cor(as.numeric(act.racipe[,tf]),
as.numeric(act.nca[,tf]),
method = 'spearman')
}
#cor.avg <- mean(abs(unlist(cor.tmp)))
cor.avg.list[[regdb.id]] <- mean(abs(unlist(cor.tmp)))
}
return(cor.avg.list)
}
#=========================
# Load act with no perturbation
acts.nopert.df <- read.csv(file='./acts/acts.regDB.0.csv', row.names = 1); acts.nopert.df <- t(acts.nopert.df)
dim(acts.nopert.df)
# Load racipe activities
act.racipe.df <- read.table(file = '/Users/a.katebi/research/netact/benchmark/sim.racipe/net30tf.states.txt', header = TRUE)
# drop meta data columns:
act.racipe <- act.racipe.df[, colnames(acts.nopert.df)]
#=========================
# Load act with no perturbation
acts.nopert.df <- read.csv(file='./acts/acts.regDB.0.csv', row.names = 1);
#acts.nopert.df <- t(acts.nopert.df)
dim(acts.nopert.df)
#=========================
# Load act with no perturbation
acts.nopert.df <- read.csv(file='./acts/acts.regDB.0.csv', row.names = 1);
#acts.nopert.df <- t(acts.nopert.df)
dim(acts.nopert.df)
# Load racipe activities
act.racipe.df <- read.table(file = '/Users/a.katebi/research/netact/benchmark/sim.racipe/net30tf.states.txt', header = TRUE)
# drop meta data columns:
act.racipe <- act.racipe.df[, colnames(acts.nopert.df)]
# Load activities
#--------------------
act.list.by.regdb <- readRDS(file = './acts/acts.all.rds')
act.netact <- act.list.by.regdb$regdb.5$regdb.1
# Load racipe activities
#-----------------------
act.racipe.df <- read.table(file = '/Users/a.katebi/research/netact/benchmark/sim.racipe/net30tf.states.txt', header = TRUE)
# drop meta data columns:
act.racipe <- act.racipe.df[, colnames(act.netact)]
dim(act.racipe)
dim(act.netact)
sum(colnames(act.racipe) == colnames(act.netact))
act.list  <- act.list.by.regdb$regdb.5
# Calculate correlations
#-----------------------
act.list  <- act.list.by.regdb$regdb.5
names(act.list)
length(names(act.list))
cor.avg.list <- list() # list for cor. list for each reg DB
for(regdb.name in names(act.list.by.regdb)){
print(regdb.name)
#act.list  <- act.list.by.regdb[[regdb.name]]
act.list  <-  act.list.by.regdb[[regdb.name]]
names(act.list)
cor.avg.list[[regdb.name]] <- cal.cor.across_models(act.racipe, act.list)
}
names(cor.avg.list)
cor.avg.list$regdb.5
# Save correlations
#------------------
fname.cor <- paste(dir.cor, 'cor.avg.rds', sep = '')
saveRDS(cor.avg.list, fname.cor)
names(cor.avg.list)
getwd()
getwd()
rm(list = ls())
library(NetAct)
outdir <- "./act/"
dir.create(outdir)
# Function definitions
#=====================#
cal_netact_act_by_regDB <- function(regdb.list, exp_df, DEresult){
actByRegDB <- list()
for (regdb_name in names(regdb.list)) {
regdb <- regdb.list[[regdb_name]]
acts = TF_Activity(names(regdb), regdb, exp_df, DEresult, with_weight = FALSE)
acts = acts$all_activities
actByRegDB[[regdb_name]] <- t(acts)
#break
}
return(actByRegDB)
}
# Activities for regulon DB with NO perturbation
# Load regulon DB
#-----------------#
fname.regdb <- '/Users/a.katebi/research/netact/benchmark/regDBs/regDB.nopert.rds'
regdb <- readRDS(file = fname.regdb)
# Activities for regulon DB with NO perturbation
# Load regulon DB
regdb <- readRDS(file = '/Users/a.katebi/research/netact/benchmark/regDBs/regDB.nopert.rds')
tfs <- names(regdb)
targets <- unique(unlist(regdb))
length(targets)
# Load RACIPE expressions
#-------------------------
exp_df <- read.table(file = '/Users/a.katebi/research/netact/benchmark/sim.racipe/net30tf.states.exp.txt', header=TRUE)
row.names(exp_df) <- c(paste0('M', exp_df$MODEL_NO)) # create and assign row names
exp_df$NO_STATES <- NULL; exp_df$STATE_NO <- NULL ; exp_df$MODEL_NO <- NULL # delete meta columns
#exp_df <- exp_df[, targets] # retain target expressions only
dim(exp_df)
exp_df <- t(exp_df) # put genes in rows, models in columns
View(exp_df)
# Load RACIPE expressions
#-------------------------
exp_df <- read.table(file = '/Users/a.katebi/research/netact/benchmark/sim.racipe/net30tf.states.exp.txt', header=TRUE)
row.names(exp_df) <- c(paste0('M', exp_df$MODEL_NO)) # create and assign row names
exp_df$NO_STATES <- NULL; exp_df$STATE_NO <- NULL ; exp_df$MODEL_NO <- NULL # delete meta columns
#exp_df <- exp_df[, targets] # retain target expressions only
dim(exp_df)
exp_df <- t(exp_df[, targets]) # put genes in rows, models in columns
#exp_df <- exp_df[, targets] # retain target expressions only
dim(exp_df)
View(exp_df)
# create DEresult object
#-----------------------
# Create an DE result list object containing a table with on column named 'padj'
DEresult <- list()
myTable <- as.data.frame(matrix(nrow = nrow(exp_df), ncol = 1),
col.names=c('padj'))
colnames(myTable) <- c('padj')
rownames(myTable) <- rownames(exp_df)
myTable$padj <- 1
DEresult$table <- myTable
# calculate TF activity using expression data as matrix:
acts = TF_Activity(names(regdb), regdb, exp_df, DEresult, with_weight = FALSE)
acts = acts$all_activities
# calculate TF activity using expression data as matrix:
act = TF_Activity(names(regdb), regdb, exp_df, DEresult, with_weight = FALSE)
act = acts$all_activities
# calculate TF activity using expression data as matrix:
act = TF_Activity(names(regdb), regdb, exp_df, DEresult, with_weight = FALSE)
act = acts$all_activities
#acts <- t(acts)
write.csv(act, file=paste0(outdir, 'act.regdb.0.csv'), quote = FALSE)
outdir
#acts <- t(acts)
write.csv(act, file=paste0(outdir, 'act.regdb.0.csv'), quote = FALSE)
View(act)
act = act$all_activities
#acts <- t(acts)
write.csv(act, file=paste0(outdir, 'act.regdb.0.csv'), quote = FALSE)
View(act)
dim(act)
View(act)
# Load RACIPE expressions
#-------------------------
fname_states_exp_txt <-
exp_df <- read.table(file = '/Users/a.katebi/research/netact/benchmark/sim.racipe/net30tf.states.exp.txt', header=TRUE)
row.names(exp_df) <- c(paste0('M', exp_df$MODEL_NO)) # create and assign row names
exp_df$NO_STATES <- NULL; exp_df$STATE_NO <- NULL ; exp_df$MODEL_NO <- NULL # delete meta columns
exp_df <- t(exp_df) # put genes in rows, models in columns
#exp_df <- exp_df[, targets] # retain target expressions only
dim(exp_df)
# create DEresult object
#-----------------------
# Create an DE result list object containing a table with on column named 'padj'
DEresult <- list()
myTable <- as.data.frame(matrix(nrow = nrow(exp_df), ncol = 1),
col.names=c('padj'))
colnames(myTable) <- c('padj')
rownames(myTable) <- rownames(exp_df)
myTable$padj <- 1
DEresult$table <- myTable
names(regdb)
length(names(regdb))
# calculate TF activity using expression data as matrix:
acts = TF_Activity(names(regdb), regdb, exp_df, DEresult, with_weight = FALSE)
acts = acts$all_activities
View(acts)
# calculate TF activity using expression data as matrix:
acts = TF_Activity(names(regdb), regdb, exp_df, DEresult, with_weight = FALSE)
act = acts$all_activities
write.csv(act, file=paste0(outdir, 'act.regDB.0.csv'), quote = FALSE)
# Calculate Activities for perturbed reg DBs
#===========================================
# Using regulon DBs with 5 perturbed targets
#-------------------------------------------
fname.regDB <- '/Users/a.katebi/research/netact/benchmark/regDBs/regDBs.5.rds'
regdb.list <- readRDS(file = fname.regDB)
actRegDB5 <- cal_netact_act_by_regDB (regdb.list, exp_df, DEresult)
a <- actRegDB5$regdb.1
View(a)
# Function definitions
#=====================#
cal_netact_act_by_regDB <- function(regdb.list, exp_df, DEresult){
actByRegDB <- list()
for (regdb_name in names(regdb.list)) {
regdb <- regdb.list[[regdb_name]]
acts = TF_Activity(names(regdb), regdb, exp_df, DEresult, with_weight = FALSE)
#acts = acts$all_activities
actByRegDB[[regdb_name]] <- acts$all_activities
#break
}
return(actByRegDB)
}
# Function definitions
#=====================#
cal_netact_act_by_regDB <- function(regdb.list, exp_df, DEresult){
actByRegDB <- list()
for (regdb_id in names(regdb.list)) {
#regdb <- regdb.list[[regdb_id]]
acts = TF_Activity(names(regdb.list[[regdb_id]]), regdb, exp_df, DEresult, with_weight = FALSE)
#acts = acts$all_activities
actByRegDB[[regdb_id]] <- acts$all_activities
#break
}
return(actByRegDB)
}
# Calculate Activities for perturbed reg DBs
#===========================================
# Using regulon DBs with 5 perturbed targets
#-------------------------------------------
fname.regDB <- '/Users/a.katebi/research/netact/benchmark/regDBs/regDBs.5.rds'
regdb.list <- readRDS(file = fname.regDB)
# Calculate Activities for perturbed reg DBs
#===========================================
# Using regulon DBs with 5 perturbed targets
#-------------------------------------------
regdb.list <- readRDS(file = '/Users/a.katebi/research/netact/benchmark/regDBs/regDBs.5.rds')
actRegDB5 <- cal_netact_act_by_regDB (regdb.list, exp_df, DEresult)
names(actRegDB5)
names(actRegDB5)
a <- actRegDB5$regdb.1
View(a)
actByRegDB_list  <- list()
saveRDS(actRegDB5, file = paste(outdir, 'acts.regdb.5.rds', sep = ''))
actByRegDB_list[['regdb.5']] <- actRegDB5
# Using regulon DBs with 10 perturbed targets
#-------------------------------------------
regdb.list <- readRDS(file = '/Users/a.katebi/research/netact/benchmark/regDBs/regDBs.10.rds')
actByRegDB  <- cal_netact_act_by_regDB (regdb.list, exp_df, DEresult)
getwd()
rm(list=ls())
# Load correlations
#-------------------
data_dir <- './cor/'
fname.cor <- paste(data_dir, './avg.cor.pert.rds', sep='')
cor.avg.list <- readRDS(fname.cor)
cor.unperturbed <- read.csv(paste(data_dir, "avg.cor.nopert.csv", sep = ''), header = T )
cor.unperturbed <- unlist(cor.unperturbed)
cor.avg.regDB.5 <- mean(unlist(cor.avg.list$regdb.5))
print(cor.avg.regDB.5)
cor.avg.regDB.10 <- mean(unlist(cor.avg.list$regdb.10))
print(cor.avg.regDB.10)
cor.avg.regDB.15 <- mean(unlist(cor.avg.list$regdb.15))
print(cor.avg.regDB.15)
# Plot correlations
#---------------------
#XLIMIT <- c(0, 1.0)
XLIMIT <- c(0.5, 0.90)
#XLIMIT <- c(0.2, 0.55)
#YLIMIT <- c(0, 25)
YLIMIT <- c(0, 45)
par(mfrow=c(3,1))
par(mar=c(2.0, 2.0, 1.5, 0.5))  # bottom, left, top, right
hist(unlist(cor.avg.list$regdb.5),  #breaks = breaks,
main = 'Avgerage correlations: regDB 5',
xlim = XLIMIT, ylim = YLIMIT,
xlab = '')
cor.avg.list$regdb.5
class(cor.avg.list$regdb.5)
hist(cor.avg.list$regdb.5)
dev.off()
cor.avg.list$regdb.5
his(cor.avg.list$regdb.5)
hist(cor.avg.list$regdb.5)
rm(list=ls())
NO.SIG.DIGITS <- 4
outdir <- './cor/'
dir.create(outdir)
# Calculate cor for unperturbed regDB
#====================================
act.nopert <- as.matrix(read.csv(file='./act/act.regdb.0.csv', row.names = 1))
dim(act.nopert)
# Load racipe activities
act.racipe.df <- read.table(file = '/Users/a.katebi/research/netact/benchmark/sim.racipe/net30tf.states.txt', header = TRUE)
rownames(act.racipe.df) <- paste('M', act.racipe.df$MODEL_NO, sep = '')
act.racipe <- t(act.racipe.df[, rownames(act.nopert)]) # retain TF activities only
cor.nopert <- diag(cor(t(act.racipe), t(act.nopert), method = 'spearman'))
cor.avg.nopert <- mean(abs(diag(cor(t(act.racipe), t(act.nopert), method = 'spearman'))))
saveRDS(cor.nopert, file = paste(outdir, 'cor.nopert.rds', sep=''))
write.csv(format(cor.avg.nopert, digits = NO.SIG.DIGITS), file = paste(outdir, 'avg.cor.nopert.csv', sep=''), row.names = FALSE, quote = FALSE)
# Calculate cor for all perturbed regulon DBs
#============================================
act.list.by.regdb <- readRDS(file = './act/act.all.rds')  # Load activities for all regulon DBs
# First, calculate cor between racipe acvities and calculated activities for each TF and
# then calculate mean of their abs values
cor.avg.list <- lapply(names(act.list.by.regdb), function(regdb.name) { # go over five regDB names of perturbation levels
sapply(names(act.list.by.regdb[[regdb.name]]), function (regdb.id) # go over 100 regDBs at each perturbation level
mean(abs(diag(cor(t(act.racipe), t(act.list.by.regdb[[regdb.name]][[regdb.id]]), method = 'spearman'))))
)
}
)
names(cor.avg.list) <- names(act.list.by.regdb)
saveRDS(cor.avg.list, file = paste(outdir, 'avg.cor.pert.rds', sep = ''))
cor.avg.list
cor.avg.list$regdb.5
c5=cor.avg.list$regdb.5
hist(c5)
rm(list = ls())
library(NetAct)
outdir <- "./act/"
dir.create(outdir)
act.all  <- list()
# Function definitions
#=====================#
cal_netact_act_by_regDB <- function(regdb.list, exp_df, DEresult){
actByRegDB <- list()
for (regdb_id in names(regdb.list)) {
#regdb <- regdb.list[[regdb_id]]
acts = TF_Activity(names(regdb.list[[regdb_id]]), regdb, exp_df, DEresult, with_weight = FALSE)
#acts = acts$all_activities
actByRegDB[[regdb_id]] <- acts$all_activities
#break
}
return(actByRegDB)
}
# Activities for regulon DB with NO perturbation
# Load regulon DB
regdb <- readRDS(file = '/Users/a.katebi/research/netact/benchmark/regDBs/regDB.nopert.rds')
tfs <- names(regdb)
targets <- unique(unlist(regdb))
length(targets)
# Load RACIPE expressions
#-------------------------
exp_df <- read.table(file = '/Users/a.katebi/research/netact/benchmark/sim.racipe/net30tf.states.exp.txt', header=TRUE)
row.names(exp_df) <- c(paste0('M', exp_df$MODEL_NO)) # create and assign row names
exp_df$NO_STATES <- NULL; exp_df$STATE_NO <- NULL ; exp_df$MODEL_NO <- NULL # delete meta columns
#exp_df <- exp_df[, targets] # retain target expressions only
dim(exp_df)
exp_df <- t(exp_df) # put genes in rows, models in columns
# create DEresult object
#-----------------------
# Create an DE result list object containing a table with on column named 'padj'
DEresult <- list()
myTable <- as.data.frame(matrix(nrow = nrow(exp_df), ncol = 1), col.names=c('padj'))
colnames(myTable) <- c('padj')
rownames(myTable) <- rownames(exp_df)
myTable$padj <- 1
DEresult$table <- myTable
# calculate TF activity using expression data as matrix:
acts = TF_Activity(names(regdb), regdb, exp_df, DEresult, with_weight = FALSE)
act = acts$all_activities
write.csv(act, file=paste0(outdir, 'act.regDB.0.csv'), quote = FALSE)
# calculate TF activity using expression data as matrix:
acts = TF_Activity(names(regdb), regdb, exp_df, DEresult, with_weight = FALSE)
acts = act$all_activities
write.csv(acts, file=paste0(outdir, 'act.regDB.0.csv'), quote = FALSE)
acts = acts$all_activities
write.csv(acts, file=paste0(outdir, 'act.regDB.0.csv'), quote = FALSE)
# Calculate Activities for perturbed reg DBs
#===========================================
# Using regulon DBs with 5 perturbed targets
#-------------------------------------------
regdb.list <- readRDS(file = '/Users/a.katebi/research/netact/benchmark/regDBs/regDBs.5.rds')
actByRegDB <- cal_netact_act_by_regDB (regdb.list, exp_df, DEresult)
getwd()
names(regdb.list)
act_list <- lapply(names(regdb.list), function(regdb.id) {
acts = TF_Activity(names(regdb.list[[regdb.id]]), regdb.list[[regdb.id]], exp_df, DEresult, with_weight = FALSE)
return(acts$all_activities)
}
)
actByRegDB <- lapply(names(regdb.list), function(regdb.id) {
acts = TF_Activity(names(regdb.list[[regdb.id]]), regdb.list[[regdb.id]], exp_df, DEresult, with_weight = FALSE)
return(acts$all_activities)
}
)
names(actByRegDB)
class(actByRegDB)
names(actByRegDB)
c=actByRegDB[[1]]
View(act)
c2=actByRegDB[[2]]
View(c2)
View(c)
names(actByRegDB) <- names(regdb.list)
names(actByRegDB)
saveRDS(actByRegDB , file = paste(outdir, 'act.regdb.5.rds', sep = ''))
outdir
saveRDS(actByRegDB , file = paste(outdir, 'act.regdb.5.rds', sep = ''))
saveRDS(actByRegDB , file = paste(outdir, 'act.regdb.5.rds', sep = ''))
act.all[['regdb.5']] <- actByRegDB
mapply(function(x,y){x^y},x=c(2,3),y=c(3,4))
# create DEresult object
#-----------------------
# Create a DE result list object containing a table with on column named 'padj'
DEresult <- list()
myTable <- as.data.frame(matrix(nrow = nrow(exp_df), ncol = 1), col.names=c('padj'))
colnames(myTable) <- c('padj')
rownames(myTable) <- rownames(exp_df)
myTable$padj <- 1
DEresult$table <- myTable
?by
regdb.list <- readRDS(file = '/Users/a.katebi/research/netact/benchmark/regDBs/regDBs.10.rds')
actByRegDB <- lapply(names(regdb.list), function(regdb.id, regdb.list, exp_df, DEresult) {
acts = TF_Activity(names(regdb.list[[regdb.id]]), regdb.list[[regdb.id]], exp_df, DEresult, with_weight = FALSE)
return(acts$all_activities)
}
)
actByRegDB <- lapply(names(regdb.list), function(regdb.id, regdb.list, exp_df, DEresult) {
acts = TF_Activity(names(regdb.list[[regdb.id]]), regdb.list[[regdb.id]], exp_df, DEresult, with_weight = FALSE)
return(acts$all_activities)
}
)
actByRegDB <- lapply(names(regdb.list), function(regdb.id, regdb.list, exp_df, DEresult) {
acts = TF_Activity(names(regdb.list[[regdb.id]]), regdb.list[[regdb.id]], exp_df, DEresult, with_weight = FALSE)
return(acts$all_activities)
}
)
actByRegDB <- lapply(names(regdb.list), function(regdb.id) {
acts = TF_Activity(names(regdb.list[[regdb.id]]), regdb.list[[regdb.id]], exp_df, DEresult, with_weight = FALSE)
return(acts$all_activities)
}
)
actByRegDB <- lapply(names(regdb.list), function(regdb.id, regdb.list) {
acts = TF_Activity(names(regdb.list[[regdb.id]]), regdb.list[[regdb.id]], exp_df, DEresult, with_weight = FALSE)
return(acts$all_activities)
}
)
