targetStatus[count:(count+1)] <- c(tg, 1)
#targetStatus[count:(count+1)] <- c(tg, 100)
count <- count + 2
}
while (count<vectorSize) {
#targetStatus[count:(count+1)] <- c('', NA)
targetStatus[count:(count+1)] <- c(" ", " " )
count <- count + 2
}
return(targetStatus)
}
for(tf in names(regdb)){
toyRegulon_adj[tf, ] <- obtain_targetStat(regdb[[tf]], vectorSize=numCols)
#break
}
adjfile <- './toyRegulon.adj'
write.table(toyRegulon_adj, file = adjfile , sep = '\t',
col.names = F, row.names = TRUE, quote = F)
length(regdb$tf6)
# convert viper regulon
adjfile <- './toyRegulon.adj'
regul <- aracne2regulon(adjfile, exp_df)
# Calculate viper activities
#---------------------------
acts.vp <- viper(exp_df, regul, verbose = FALSE)
regul <- aracne2regulon(adjfile, exp_df)
regul <- aracne2regulon(adjfile, exp_df)
obtain_targetStat <- function(targets, vectorSize){
targetStatus <- vector(mode = 'character', length = vectorSize)
count <- 1
for(tg in targets){
targetStatus[count:(count+1)] <- c(tg, 1)
#targetStatus[count:(count+1)] <- c(tg, 100)
count <- count + 2
}
while (count<vectorSize) {
#targetStatus[count:(count+1)] <- c('', NA)
targetStatus[count:(count+1)] <- c(" ", "0.9" )
count <- count + 2
}
return(targetStatus)
}
for(tf in names(regdb)){
toyRegulon_adj[tf, ] <- obtain_targetStat(regdb[[tf]], vectorSize=numCols)
#break
}
adjfile <- './toyRegulon.adj'
write.table(toyRegulon_adj, file = adjfile , sep = '\t',
col.names = F, row.names = TRUE, quote = F)
length(regdb$tf6)
regul <- aracne2regulon(adjfile, exp_df)
class(regul)
names(regul)
length(names(regul))
regul$tf1
length(regul$tf6$tfmode)
regul$tf10
regul$tf1
regul$tf9
regul$tf13
regul$tf30
regul$tf20
# Calculate viper activities
#---------------------------
acts.vp <- viper(exp_df, regul, verbose = FALSE)
regul <- aracne2regulon(adjfile, exp_df)
# Calculate viper activities
#---------------------------
acts.vp <- viper(exp_df, regul, verbose = FALSE)
obtain_targetStat <- function(targets, vectorSize){
targetStatus <- vector(mode = 'character', length = vectorSize)
count <- 1
for(tg in targets){
targetStatus[count:(count+1)] <- c(tg, 1)
#targetStatus[count:(count+1)] <- c(tg, 100)
count <- count + 2
}
while (count<vectorSize) {
#targetStatus[count:(count+1)] <- c('', NA)
targetStatus[count:(count+1)] <- c(" ", 0.9 )
count <- count + 2
}
return(targetStatus)
}
toyRegulon_adj <- as.data.frame(matrix(nrow = length(regdb),
ncol = numCols))
rownames(toyRegulon_adj) <- names(regdb)
class(toyRegulon_adj)
dim(toyRegulon_adj)
for(tf in names(regdb)){
toyRegulon_adj[tf, ] <- obtain_targetStat(regdb[[tf]], vectorSize=numCols)
#break
}
adjfile <- './toyRegulon.adj'
write.table(toyRegulon_adj, file = adjfile , sep = '\t',
col.names = F, row.names = TRUE, quote = F)
length(regdb$tf6)
# convert viper regulon
adjfile <- './toyRegulon.adj'
regul <- aracne2regulon(adjfile, exp_df)
# Calculate viper activities
#---------------------------
acts.vp <- viper(exp_df, regul, verbose = FALSE)
class(regul$tf6$tfmode)
class(regul$tf6$likelihood)
# Calculate viper activities
#---------------------------
acts.vp <- viper(exp_df, regul, verbose = FALSE)
class(acts.vp)
# meta viper
#============
devtools::install_github(repo = "califano-lab/PISCES", force = TRUE, build_vignettes = TRUE)
rm(list = ls())
library(viper)
names(regdb)
class(regdb)
maxTargetCount <- 1
for(tf in names(regdb)){
if (length(regdb[[tf]])>maxTargetCount) maxTargetCount <- length(regdb[[tf]])
}
maxTargetCount
numCols <- maxTargetCount*2
toyRegulon_adj <- as.data.frame(matrix(nrow = length(regdb),
ncol = numCols))
rownames(toyRegulon_adj) <- names(regdb)
class(toyRegulon_adj)
rm(list = ls())
library(viper)
names(regdb)
class(regdb)
maxTargetCount <- 1
for(tf in names(regdb)){
if (length(regdb[[tf]])>maxTargetCount) maxTargetCount <- length(regdb[[tf]])
}
maxTargetCount
numCols <- maxTargetCount*2
for(tf in names(regdb)){
if (length(regdb[[tf]])>maxTargetCount) maxTargetCount <- length(regdb[[tf]])
}
rm(list = ls())
library(viper)
names(regdb)
rm(list = ls())
# load expression data
#------------------------
fname_states_exp_txt <- '/Users/a.katebi/research/netact/sim.racipe/net30tf.states.exp.txt'
exp_df <- read.table(file = fname_states_exp_txt, header=TRUE)
# create row names:
obs_ids <- c(paste0('M', exp_df$MODEL_NO))
exp_df$NO_STATES <- NULL
exp_df$STATE_NO <- NULL
exp_df$MODEL_NO <- NULL
row.names(exp_df) <- obs_ids
# convert data netact format
exp_df <- t(exp_df)
rownames(exp_df)
# load regulon DB with no perturbation
#-------------------------------------
fname.regdb <- '../regDBs/regDB.nopert.rds'
regdb <- readRDS(file = fname.regdb )
names(regdb)
# convert viper regulon
adjfile <- './toyRegulon.adj'
regul <- aracne2regulon(adjfile, exp_df)
warnings()[1]
regul <- aracne2regulon(adjfile, exp_df)
rm(list = ls())
library(viper)
names(regdb)
class(regdb)
maxTargetCount <- 1
for(tf in names(regdb)){
if (length(regdb[[tf]])>maxTargetCount) maxTargetCount <- length(regdb[[tf]])
}
names(regdb)
# load regulon DB with no perturbation
#-------------------------------------
fname.regdb <- '../regDBs/regDB.nopert.rds'
regdb <- readRDS(file = fname.regdb )
names(regdb)
fname.regdb <- '../regDBs/regDB.nopert.rds'
regdb <- readRDS(file = fname.regdb )
names(regdb)
names(regdb)
class(regdb)
maxTargetCount <- 1
for(tf in names(regdb)){
if (length(regdb[[tf]])>maxTargetCount) maxTargetCount <- length(regdb[[tf]])
}
maxTargetCount
numCols <- maxTargetCount*2
toyRegulon_adj <- as.data.frame(matrix(nrow = length(regdb),
ncol = numCols))
rownames(toyRegulon_adj) <- names(regdb)
class(toyRegulon_adj)
dim(toyRegulon_adj)
for(tf in names(regdb)){
toyRegulon_adj[tf, ] <- obtain_targetStat(regdb[[tf]], vectorSize=numCols)
#break
}
source("./functions.R")
rownames(toyRegulon_adj) <- names(regdb)
class(toyRegulon_adj)
dim(toyRegulon_adj)
for(tf in names(regdb)){
toyRegulon_adj[tf, ] <- obtain_targetStat(regdb[[tf]], vectorSize=numCols)
#break
}
adjfile <- './toyRegulon.adj'
write.table(toyRegulon_adj, file = adjfile , sep = '\t',
col.names = F, row.names = TRUE, quote = F)
length(regdb$tf6)
rm(list = ls())
library(viper)
data(bcellViper, package="bcellViper")
adjfile <- system.file("aracne", "bcellaracne.adj", package = "bcellViper")
regul <- aracne2regulon(adjfile, dset, verbose = FALSE)
print(regul)
signature <- rowTtest(dset, "description", c("CB", "CC"), "N")
signature <- (qnorm(signature$p.value/2, lower.tail = FALSE) *
+ sign(signature$statistic))[, 1]
head(signature)
signature <- rowTtest(dset, "description", c("CB", "CC"), "N")
head(signature)
View(signature)
class(signature)
signature <- (qnorm(signature$p.value/2, lower.tail = FALSE) *
+ sign(signature$statistic))[, 1]
head(signature)
nullmodel <- ttestNull(dset, "description", c("CB", "CC"), "N", per = 1000,
+ repos = TRUE, verbose = FALSE)
nullmodel <- ttestNull(dset, "description", c("CB", "CC"), "N", per = 1000,
+ repos = TRUE, verbose = FALSE)
nullmodel <- ttestNull(dset, "description", c("CB", "CC"), "N", per = 1000,
repos = TRUE, verbose = FALSE)
regulon
mrs <- msviper(signature, regulon, nullmodel, verbose = FALSE)
summary(mrs)
summary(mrs)
class(mrs)
plot(mrs, cex = .7)
getwd()
#' MetaVIPER implementation that will perform a weighted stouffer integration based on highest NES.
#'
#' @param ges Gene Expression Signature (features X samples)
#' @param net.list List object with the networks to be used
#' @param use.nets Optional argument to sslect the top n networks. If not specified, all networks are used.
#' @param ret.weights Optional argument to return the network weight matrix as well as the VIPER matrix. FALSE by default.
#' @return Either a viper matrix, or a list with a viper matrix and the network weight matrix.
WeightedVIPER <- function(ges, net.list, use.nets, ret.weights = FALSE) {
require(viper)
num.nets <- length(net.list)
num.samps <- ncol(ges)
## create weight matrix
w.mat <- matrix(0L, nrow = num.nets, ncol = ncol(ges))
colnames(w.mat) <- colnames(ges); rownames(w.mat) <- names(net.list)
## run VIPER with each network
print('Generating VIPER matrices...')
vip.list <- list()
for (i in 1:num.nets) {
vip.list[[i]] <- viper(ges, net.list[i], method = 'none')
}
names(vip.list) <- names(net.list)
## count for each gene
print('Generating weights...')
uni.genes <- unique(unlist(lapply(vip.list, rownames)))
for (g in uni.genes) {
for (s in 1:num.samps) {
nes.vals <- unlist(lapply(vip.list, function(x){
if (g %in% rownames(x)) {
return(x[g,s])
} else {
return(0)
}}))
max.ind <- which.max(abs(nes.vals))
w.mat[max.ind, s] <- w.mat[max.ind, s] + 1
}
}
## integration
print('Integrating...')
int.mat <- matrix(0L, nrow = length(uni.genes), ncol = num.samps)
rownames(int.mat) <- uni.genes; colnames(int.mat) <- colnames(ges)
for (g in uni.genes) {
for (s in 1:num.samps) {
nes.vals <- unlist(lapply(vip.list, function(x){
if (g %in% rownames(x)) {
return(x[g,s])
} else {
return(NA)
}}))
w.vals <- w.mat[,s][!is.na(nes.vals)]
w.vals <- w.vals / sum(w.vals)
nes.vals <- nes.vals[!is.na(nes.vals)]
# if use.nets are specified, subset to the top n (or use all if n > length)
if (!missing(use.nets)) {
w.order <- order(w.vals, decreasing = TRUE)
w.vals <- w.vals[ w.order[1:min(length(w.order), use.nets)] ]
nes.vals <- nes.vals[ w.order[1:min(length(nes.vals), use.nets)] ]
}
int.mat[g,s] <- sum(nes.vals * w.vals) / sqrt(sum(w.vals**2))
}
}
## return
if (ret.weights) {
return( list('viper' = int.mat, 'weights' = w.mat) )
} else {
return( int.mat )
}
}
vobj <- WeightedVIPER(ges=signature,
net.list=regulon,
#use.nets,
ret.weights = FALSE)
vobj <- WeightedVIPER(ges=signature,
net.list=regulon,
#use.nets,
ret.weights = FALSE)
#' MetaVIPER implementation that will perform a weighted stouffer integration based on highest NES.
#'
#' @param ges Gene Expression Signature (features X samples)
#' @param net.list List object with the networks to be used
#' @param use.nets Optional argument to sslect the top n networks. If not specified, all networks are used.
#' @param ret.weights Optional argument to return the network weight matrix as well as the VIPER matrix. FALSE by default.
#' @return Either a viper matrix, or a list with a viper matrix and the network weight matrix.
WeightedVIPER <- function(ges, net.list, use.nets, ret.weights = FALSE) {
require(viper)
num.nets <- length(net.list)
num.samps <- ncol(ges)
## create weight matrix
w.mat <- matrix(0L, nrow = num.nets, ncol = ncol(ges))
colnames(w.mat) <- colnames(ges); rownames(w.mat) <- names(net.list)
## run VIPER with each network
print('Generating VIPER matrices...')
vip.list <- list()
for (i in 1:num.nets) {
vip.list[[i]] <- viper(ges, net.list[i], method = 'none')
}
names(vip.list) <- names(net.list)
## count for each gene
print('Generating weights...')
uni.genes <- unique(unlist(lapply(vip.list, rownames)))
for (g in uni.genes) {
for (s in 1:num.samps) {
nes.vals <- unlist(lapply(vip.list, function(x){
if (g %in% rownames(x)) {
return(x[g,s])
} else {
return(0)
}}))
max.ind <- which.max(abs(nes.vals))
w.mat[max.ind, s] <- w.mat[max.ind, s] + 1
}
}
## integration
print('Integrating...')
int.mat <- matrix(0L, nrow = length(uni.genes), ncol = num.samps)
rownames(int.mat) <- uni.genes; colnames(int.mat) <- colnames(ges)
for (g in uni.genes) {
for (s in 1:num.samps) {
nes.vals <- unlist(lapply(vip.list, function(x){
if (g %in% rownames(x)) {
return(x[g,s])
} else {
return(NA)
}}))
w.vals <- w.mat[,s][!is.na(nes.vals)]
w.vals <- w.vals / sum(w.vals)
nes.vals <- nes.vals[!is.na(nes.vals)]
# if use.nets are specified, subset to the top n (or use all if n > length)
if (!missing(use.nets)) {
w.order <- order(w.vals, decreasing = TRUE)
w.vals <- w.vals[ w.order[1:min(length(w.order), use.nets)] ]
nes.vals <- nes.vals[ w.order[1:min(length(nes.vals), use.nets)] ]
}
int.mat[g,s] <- sum(nes.vals * w.vals) / sqrt(sum(w.vals**2))
}
}
## return
if (ret.weights) {
return( list('viper' = int.mat, 'weights' = w.mat) )
} else {
return( int.mat )
}
}
vobj <- WeightedVIPER(ges=signature,
net.list=regulon,
#use.nets,
ret.weights = FALSE)
rm(list = ls())
library(viper)
data(bcellViper, package="bcellViper")
adjfile <- system.file("aracne", "bcellaracne.adj", package = "bcellViper")
regul <- aracne2regulon(adjfile, dset, verbose = FALSE)
print(regul)
signature <- rowTtest(dset, "description", c("CB", "CC"), "N")
class(signature)
head(signature)
class(signature)
signature
length(signature)
names(signature)
signature$statistic
class(signature$statistic)
signature.matrix <- signature$statistic
rm(signature.matrix)
signature.statistic <- signature$statistic
rm(signature.statistic)
signature.stat <- signature$statistic
View(signature.stat)
data(bcellViper, package="bcellViper")
sig <- rowTtest(dset, "description", c("CB", "CC"), "N")$statistic
dnull <- ttestNull(dset, "description", c("CB", "CC"), "N", per=100) # Only 100 permutations to reduce computation time, but it is recommended to perform at least 1000 permutations
mra <- msviper(sig, regulon, dnull)
plot(mra, cex=.7)
data(bcellViper, package="bcellViper")
sig <- rowTtest(dset, "description", "CB", "N")$statistic
mra <- msviper(sig, regulon)
tmp <- unique(c(names(mra$regulon), rownames(mra$signature)))
annot <- 1:length(tmp)
names(annot) <- tmp
plot(mra, cex=.7)
mra <- msviperAnnot(mra, annot)
plot(mra, cex=.7)
mra <- msviper(sig, regulon)
tmp <- unique(c(names(mra$regulon), rownames(mra$signature)))
annot <- 1:length(tmp)
names(annot) <- tmp
plot(mra, cex=.7)
mra <- msviperAnnot(mra, annot)
plot(mra, cex=.7)
data(bcellViper, package="bcellViper")
sig <- rowTtest(dset, "description", c("CB", "CC"), "N")$statistic
dnull <- ttestNull(dset, "description", c("CB", "CC"), "N", per=100) # Only 100 permutations to reduce computation time, but it is recommended to perform at least 1000 permutations
mra <- msviper(sig, regulon, dnull)
mra <- msviperCombinatorial(mra, 20)
plot(mra, cex=.7)
mra <- msviper(sig, regulon, dnull)
plot(mra, cex=.7)
mra <- msviperCombinatorial(mra, 20)
plot(mra, cex=.7)
data(bcellViper, package="bcellViper")
sig <- rowTtest(dset, "description", c("CB", "CC"), "N")$statistic
dnull <- ttestNull(dset, "description", c("CB", "CC"), "N", per=100) # Only 100 permutations to reduce computation time, but it is recommended to perform at least 1000 permutations
plot(mra, cex=.7)
plot(mra, cex=.7)
mra <- msviperCombinatorial(mra, 20)
plot(mra, cex=.7)
mra <- msviperSynergy(mra)
summary(mra)
plot(mra, cex=.7)
data("/Users/a.katebi/Dropbox/NETACT/data/B1/Viper.rdata")
load("/Users/a.katebi/Dropbox/NETACT/data/B1/Viper.rdata")
rm(list = ls())
load("/Users/a.katebi/Dropbox/NETACT/data/B1/Viper.rdata")
View(activity_nes)
View(activity_nes)
dim(activity_nes)
View(activity_ranks)
View(columns_perturbation_annot)
View(rows_regulons_annot)
View(rows_regulons_annot)
View(columns_perturbation_annot)
View(activity_ranks)
View(rows_regulons_annot)
View(rows_regulons_annot)
View(activity_nes)
View(activity_ranks)
View(columns_perturbation_annot)
View(rows_regulons_annot)
dim(activity_nes)
load("/Users/a.katebi/Dropbox/NETACT/data/B1/basal.rdata")
rm(list = ls())
load("/Users/a.katebi/Dropbox/NETACT/data/B1/basal.rdata")
View(activity_nes)
View(activity_ranks)
View(columns_perturbation_annot)
View(rows_regulons_annot)
load("/Users/a.katebi/Dropbox/NETACT/data/B1/Viper.rdata")
load("/Users/a.katebi/Dropbox/NETACT/data/B1/basal.rdata")
View(activity_nes)
View(activity_ranks)
View(columns_perturbation_annot)
View(activity_nes)
View(activity_ranks)
View(columns_perturbation_annot)
View(rows_regulons_annot)
rm(list = ls())
load("/Users/a.katebi/Dropbox/NETACT/data/B1/NetAct_GSE31534.rdata")
rm(list = ls())
load("/Users/a.katebi/Dropbox/NETACT/data/B2/NetAct_GSE31534.rdata")
View(activity_nes)
View(activity_ranks)
View(columns_perturbation_annot)
View(rows_regulons_annot)
rm(list = ls())
load("/Users/a.katebi/Dropbox/NETACT/data/B2/NetAct_GSE31534.rdata")
rm(list = ls())
load("/Users/a.katebi/Dropbox/NETACT/data/B2/NetAct_GSE31534.rdata")
load("/Users/a.katebi/Dropbox/NETACT/data/B3/NetAct.rdata")
rm(list = ls())
load("/Users/a.katebi/Dropbox/NETACT/data/B3/NetAct.rdata")
View(activity_nes)
View(activity_ranks)
View(columns_perturbation_annot)
View(rows_regulons_annot)
data(bcellViper, package="bcellViper")
tmp <- exprs(dset)[1:10, ]
tmp[round(runif(100, 1, length(tmp)))] <- NA
frvarna(tmp)
?WeightedVIPER
View(activity_ranks)
getwd()
